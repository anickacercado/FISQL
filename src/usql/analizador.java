/* analizador.java */
/* Generated By:JavaCC: Do not edit this line. analizador.java */
package usql;
import estructuraUSQL.*;
import java.util.ArrayList;

public class analizador implements analizadorConstants {
  public static void main(String args[]) throws ParseException {
    analizador parser = new analizador(System.in);
    parser.S();
  }

  final public ejecutar S() throws ParseException {ArrayList<simbolo> lsim= new ArrayList<simbolo>();
    lsim = LISTA_SENTENCIA_GLOBAL();
{if ("" != null) return new ejecutar(lsim);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<simbolo> LISTA_SENTENCIA_GLOBAL() throws ParseException {ArrayList<simbolo> lsim= new ArrayList<simbolo>();
        ArrayList<simbolo> lsim2= new ArrayList<simbolo>();
    simbolo rsim;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_CREAR:{
      rsim = CREAR();
lsim.add(rsim);
      break;
      }
    case TOKEN_USAR:{
      rsim = USAR_BD();
lsim.add(rsim);
      break;
      }
    case TOKEN_ALTERAR:{
      rsim = ALTERAR();
lsim.add(rsim);
      break;
      }
    case TOKEN_ELIMINAR:{
      rsim = ELIMINAR();
lsim.add(rsim);
      break;
      }
    case TOKEN_INSERTAR:{
      rsim = INSERTAR();
lsim.add(rsim);
      break;
      }
    case TOKEN_ACTUALIZAR:{
      rsim = ACTUALIZAR();
lsim.add(rsim);
      break;
      }
    case TOKEN_BORRAR:{
      rsim = BORRAR();
lsim.add(rsim);
      break;
      }
    case TOKEN_SELECCIONAR:{
      rsim = SELECCIONAR();
      jj_consume_token(PYCOMA);
lsim.add(rsim);
      break;
      }
    case TOKEN_OTORGAR:{
      rsim = OTORGAR();
lsim.add(rsim);
      break;
      }
    case TOKEN_DENEGAR:{
      rsim = DENEGAR();
lsim.add(rsim);
      break;
      }
    case TOKEN_DECLARAR:{
      lsim = DECLARAR();
      break;
      }
    case TOKEN_BACKUP_USQL:
    case TOKEN_BACKUP_COMPLETO:{
      rsim = BACKUP();
lsim.add(rsim);
      break;
      }
    case TOKEN_RESTAURAR_USQL:
    case TOKEN_RESTAURAR_COMPLETO:{
      rsim = RESTAURAR();
lsim.add(rsim);
      break;
      }
    case TOKEN_IMPRIMIR:
    case ID:{
      rsim = LLAMADA_METODO_FUNCION();
lsim.add(rsim);
      break;
      }
    case VARIABLE:{
      rsim = ASIGNAR();
lsim.add(rsim);
      break;
      }
    case TOKEN_MIENTRAS:{
      rsim = MIENTRAS();
lsim.add(rsim);
      break;
      }
    case TOKEN_SI:{
      rsim = SI();
lsim.add(rsim);
      break;
      }
    case TOKEN_PARA:{
      rsim = PARA();
lsim.add(rsim);
      break;
      }
    case TOKEN_SELECCIONA:{
      rsim = SELECCIONA();
lsim.add(rsim);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_CREAR:
    case TOKEN_USAR:
    case TOKEN_ALTERAR:
    case TOKEN_ELIMINAR:
    case TOKEN_INSERTAR:
    case TOKEN_ACTUALIZAR:
    case TOKEN_BORRAR:
    case TOKEN_SELECCIONAR:
    case TOKEN_OTORGAR:
    case TOKEN_DENEGAR:
    case TOKEN_DECLARAR:
    case TOKEN_SI:
    case TOKEN_SELECCIONA:
    case TOKEN_PARA:
    case TOKEN_MIENTRAS:
    case TOKEN_IMPRIMIR:
    case TOKEN_BACKUP_USQL:
    case TOKEN_BACKUP_COMPLETO:
    case TOKEN_RESTAURAR_USQL:
    case TOKEN_RESTAURAR_COMPLETO:
    case ID:
    case VARIABLE:{
      lsim2 = LISTA_SENTENCIA_GLOBAL();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
for(int i=0; i < lsim2.size(); i++){
                                lsim.add(lsim2.get(i));
                        }
                        {if ("" != null) return lsim;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<simbolo> LISTA_SENTENCIA_LOCAL() throws ParseException {ArrayList<simbolo> lsim= new ArrayList<simbolo>();
        ArrayList<simbolo> lsim2= new ArrayList<simbolo>();
        simbolo rsim;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_RETORNO:{
      rsim = RETORNO();
lsim.add(rsim);
      break;
      }
    case TOKEN_INSERTAR:{
      rsim = INSERTAR();
lsim.add(rsim);
      break;
      }
    case TOKEN_ACTUALIZAR:{
      rsim = ACTUALIZAR();
lsim.add(rsim);
      break;
      }
    case TOKEN_BORRAR:{
      rsim = BORRAR();
lsim.add(rsim);
      break;
      }
    case TOKEN_SELECCIONAR:{
      rsim = SELECCIONAR();
      jj_consume_token(PYCOMA);
lsim.add(rsim);
      break;
      }
    case TOKEN_DECLARAR:{
      lsim = DECLARAR();
      break;
      }
    case VARIABLE:{
      rsim = ASIGNAR();
lsim.add(rsim);
      break;
      }
    case TOKEN_SI:{
      rsim = SI();
lsim.add(rsim);
      break;
      }
    case TOKEN_SELECCIONA:{
      rsim = SELECCIONA();
lsim.add(rsim);
      break;
      }
    case TOKEN_PARA:{
      rsim = PARA();
lsim.add(rsim);
      break;
      }
    case TOKEN_MIENTRAS:{
      rsim = MIENTRAS();
lsim.add(rsim);
      break;
      }
    case TOKEN_DETENER:{
      rsim = DETENER();
lsim.add(rsim);
      break;
      }
    case TOKEN_IMPRIMIR:
    case ID:{
      rsim = LLAMADA_METODO_FUNCION();
lsim.add(rsim);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_RETORNO:
    case TOKEN_INSERTAR:
    case TOKEN_ACTUALIZAR:
    case TOKEN_BORRAR:
    case TOKEN_SELECCIONAR:
    case TOKEN_DECLARAR:
    case TOKEN_SI:
    case TOKEN_SELECCIONA:
    case TOKEN_PARA:
    case TOKEN_MIENTRAS:
    case TOKEN_DETENER:
    case TOKEN_IMPRIMIR:
    case ID:
    case VARIABLE:{
      lsim2 = LISTA_SENTENCIA_LOCAL();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
for(int i=0; i < lsim2.size(); i++){
                                lsim.add(lsim2.get(i));
                        }
                        {if ("" != null) return lsim;}
    throw new Error("Missing return statement in function");
  }

  final public simbolo CREAR() throws ParseException {
    jj_consume_token(TOKEN_CREAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_BASE_DATOS:{
      CREAR_BD();
      break;
      }
    case TOKEN_TABLA:{
      CREAR_TABLA();
      break;
      }
    case TOKEN_OBJETO:{
      CREAR_OBJETO();
      break;
      }
    case TOKEN_FUNCION:{
      CREAR_FUNCION();
      break;
      }
    case TOKEN_PROCEDIMIENTO:{
      CREAR_PROCEDIMIENTO();
      break;
      }
    case TOKEN_USUARIO:{
      CREAR_USUARIO();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public void CREAR_BD() throws ParseException {
    jj_consume_token(TOKEN_BASE_DATOS);
    jj_consume_token(ID);
    jj_consume_token(PYCOMA);
  }

  final public void CREAR_TABLA() throws ParseException {
    jj_consume_token(TOKEN_TABLA);
    jj_consume_token(ID);
    jj_consume_token(PAR_ABRE);
    LISTA_PARAMETRO_TABLA();
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(PYCOMA);
  }

  final public void LISTA_PARAMETRO_TABLA() throws ParseException {
    PARAMETRO_TABLA();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      LISTA_PARAMETRO_TABLA();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void PARAMETRO_TABLA() throws ParseException {
    TIPO_DATO();
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_NULO:
    case TOKEN_NO_NULO:
    case TOKEN_AUTOINCREMETABLE:
    case TOKEN_LLAVE_PRIMARIA:
    case TOKEN_LLAVE_FORANEA:{
      LISTA_COMPLEMENTO_PARAMETRO_TABLA();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  final public void LISTA_COMPLEMENTO_PARAMETRO_TABLA() throws ParseException {
    COMPLEMENTO_PARAMETRO_TABLA();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_NULO:
    case TOKEN_NO_NULO:
    case TOKEN_AUTOINCREMETABLE:
    case TOKEN_LLAVE_PRIMARIA:
    case TOKEN_LLAVE_FORANEA:{
      LISTA_COMPLEMENTO_PARAMETRO_TABLA();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  final public void COMPLEMENTO_PARAMETRO_TABLA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_NULO:{
      jj_consume_token(TOKEN_NULO);
      break;
      }
    case TOKEN_NO_NULO:{
      jj_consume_token(TOKEN_NO_NULO);
      break;
      }
    case TOKEN_AUTOINCREMETABLE:{
      jj_consume_token(TOKEN_AUTOINCREMETABLE);
      break;
      }
    case TOKEN_LLAVE_PRIMARIA:{
      jj_consume_token(TOKEN_LLAVE_PRIMARIA);
      break;
      }
    case TOKEN_LLAVE_FORANEA:{
      jj_consume_token(TOKEN_LLAVE_FORANEA);
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TIPO_DATO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TEXT:{
      jj_consume_token(TOKEN_TEXT);
      break;
      }
    case TOKEN_INTEGER:{
      jj_consume_token(TOKEN_INTEGER);
      break;
      }
    case TOKEN_DOUBLE:{
      jj_consume_token(TOKEN_DOUBLE);
      break;
      }
    case TOKEN_BOOL:{
      jj_consume_token(TOKEN_BOOL);
      break;
      }
    case TOKEN_DATE:{
      jj_consume_token(TOKEN_DATE);
      break;
      }
    case TOKEN_DATETIME:{
      jj_consume_token(TOKEN_DATETIME);
      break;
      }
    case ID:{
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CREAR_OBJETO() throws ParseException {
    jj_consume_token(TOKEN_OBJETO);
    jj_consume_token(ID);
    jj_consume_token(PAR_ABRE);
    LISTA_PARAMETRO();
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(PYCOMA);
  }

  final public void LISTA_PARAMETRO() throws ParseException {
    TIPO_DATO();
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      LISTA_PARAMETRO();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void CREAR_FUNCION() throws ParseException {
    jj_consume_token(TOKEN_FUNCION);
    jj_consume_token(ID);
    jj_consume_token(PAR_ABRE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TEXT:
    case TOKEN_INTEGER:
    case TOKEN_DOUBLE:
    case TOKEN_BOOL:
    case TOKEN_DATE:
    case TOKEN_DATETIME:
    case ID:{
      LISTA_PARAMETRO_PROC_FUN();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(PAR_CIERRA);
    TIPO_DATO();
    jj_consume_token(LLAVE_ABRE);
    LISTA_SENTENCIA_LOCAL();
    jj_consume_token(LLAVE_CIERRA);
  }

  final public void LISTA_PARAMETRO_PROC_FUN() throws ParseException {
    TIPO_DATO();
    jj_consume_token(VARIABLE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      LISTA_PARAMETRO_PROC_FUN();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void CREAR_PROCEDIMIENTO() throws ParseException {
    jj_consume_token(TOKEN_PROCEDIMIENTO);
    jj_consume_token(ID);
    jj_consume_token(PAR_ABRE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TEXT:
    case TOKEN_INTEGER:
    case TOKEN_DOUBLE:
    case TOKEN_BOOL:
    case TOKEN_DATE:
    case TOKEN_DATETIME:
    case ID:{
      LISTA_PARAMETRO_PROC_FUN();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(LLAVE_ABRE);
    LISTA_SENTENCIA_LOCAL();
    jj_consume_token(LLAVE_CIERRA);
  }

  final public void CREAR_USUARIO() throws ParseException {
    jj_consume_token(TOKEN_USUARIO);
    jj_consume_token(ID);
    jj_consume_token(TOKEN_COLOCAR);
    jj_consume_token(TOKEN_PASSWORD);
    jj_consume_token(IGUAL);
    jj_consume_token(CADENA);
    jj_consume_token(PYCOMA);
  }

  final public simbolo RETORNO() throws ParseException {Token t;
expresion exp;
    t = jj_consume_token(TOKEN_RETORNO);
    exp = CONDICION();
    jj_consume_token(PYCOMA);
{if ("" != null) return new simbolo(t.beginLine, t.beginColumn,"RETORNAR","RETORNAR","RETORNAR", new ambito("RETORNAR", new ArrayList<simbolo>()), exp);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<expresion> LISTA_COND() throws ParseException {ArrayList<expresion> cond = new ArrayList<expresion>();
 ArrayList<expresion> listacond = new ArrayList<expresion>();
 expresion exp;
    exp = CONDICION();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      listacond = LISTA_COND();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
cond.add(exp);
                for(int i=0; i < listacond.size(); i++){
                        cond.add(listacond.get(i));
                }
                {if ("" != null) return cond;}
    throw new Error("Missing return statement in function");
  }

  final public simbolo USAR_BD() throws ParseException {
    jj_consume_token(TOKEN_USAR);
    jj_consume_token(ID);
    jj_consume_token(PYCOMA);
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public simbolo ALTERAR() throws ParseException {
    jj_consume_token(TOKEN_ALTERAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TABLA:{
      ALTERAR_TABLA();
      break;
      }
    case TOKEN_OBJETO:{
      ALTERAR_OBJETO();
      break;
      }
    case TOKEN_USUARIO:{
      ALTERAR_USUARIO();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public void LISTA_ID() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      LISTA_ID();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void ALTERAR_TABLA() throws ParseException {
    jj_consume_token(TOKEN_TABLA);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_AGREGAR:{
      jj_consume_token(TOKEN_AGREGAR);
      jj_consume_token(PAR_ABRE);
      LISTA_PARAMETRO_TABLA();
      jj_consume_token(PAR_CIERRA);
      break;
      }
    case TOKEN_QUITAR:{
      jj_consume_token(TOKEN_QUITAR);
      LISTA_ID();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PYCOMA);
  }

  final public void ALTERAR_OBJETO() throws ParseException {
    jj_consume_token(TOKEN_OBJETO);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_AGREGAR:{
      jj_consume_token(TOKEN_AGREGAR);
      jj_consume_token(PAR_ABRE);
      LISTA_PARAMETRO();
      jj_consume_token(PAR_CIERRA);
      break;
      }
    case TOKEN_QUITAR:{
      jj_consume_token(TOKEN_QUITAR);
      LISTA_ID();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PYCOMA);
  }

  final public void ALTERAR_USUARIO() throws ParseException {
    jj_consume_token(TOKEN_USUARIO);
    jj_consume_token(ID);
    jj_consume_token(TOKEN_CAMBIAR);
    jj_consume_token(TOKEN_PASSWORD);
    jj_consume_token(IGUAL);
    jj_consume_token(CADENA);
    jj_consume_token(PYCOMA);
  }

  final public simbolo ELIMINAR() throws ParseException {
    jj_consume_token(TOKEN_ELIMINAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TABLA:{
      jj_consume_token(TOKEN_TABLA);
      break;
      }
    case TOKEN_BASE_DATOS:{
      jj_consume_token(TOKEN_BASE_DATOS);
      break;
      }
    case TOKEN_OBJETO:{
      jj_consume_token(TOKEN_OBJETO);
      break;
      }
    case TOKEN_USUARIO:{
      jj_consume_token(TOKEN_USUARIO);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ID);
    jj_consume_token(PYCOMA);
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public simbolo INSERTAR() throws ParseException {
    jj_consume_token(TOKEN_INSERTAR);
    jj_consume_token(TOKEN_TABLA);
    jj_consume_token(ID);
    jj_consume_token(PAR_ABRE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      LISTA_ID();
      jj_consume_token(PAR_CIERRA);
      jj_consume_token(TOKEN_VALORES);
      jj_consume_token(PAR_ABRE);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    LISTA_COND();
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(PYCOMA);
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public simbolo ACTUALIZAR() throws ParseException {
    jj_consume_token(TOKEN_ACTUALIZAR);
    jj_consume_token(TOKEN_TABLA);
    jj_consume_token(ID);
    jj_consume_token(PAR_ABRE);
    LISTA_ID();
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(TOKEN_VALORES);
    jj_consume_token(PAR_ABRE);
    LISTA_COND();
    jj_consume_token(PAR_CIERRA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_DONDE:{
      jj_consume_token(TOKEN_DONDE);
      CONDICION();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(PYCOMA);
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public simbolo BORRAR() throws ParseException {
    jj_consume_token(TOKEN_BORRAR);
    jj_consume_token(TOKEN_TABLA);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_DONDE:{
      jj_consume_token(TOKEN_DONDE);
      CONDICION();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(PYCOMA);
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public simbolo SELECCIONAR() throws ParseException {
    jj_consume_token(TOKEN_SELECCIONAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      LISTA_ID();
      break;
      }
    case POR:{
      jj_consume_token(POR);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(TOKEN_DE);
    LISTA_ID();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_DONDE:{
      jj_consume_token(TOKEN_DONDE);
      CONDICION();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_ORDENAR:{
      jj_consume_token(TOKEN_ORDENAR);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TOKEN_ASC:{
        jj_consume_token(TOKEN_ASC);
        break;
        }
      case TOKEN_DESC:{
        jj_consume_token(TOKEN_DESC);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public simbolo OTORGAR() throws ParseException {
    jj_consume_token(TOKEN_OTORGAR);
    jj_consume_token(ID);
    jj_consume_token(ID);
    jj_consume_token(PUNTO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POR:{
      jj_consume_token(POR);
      break;
      }
    case ID:{
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PYCOMA);
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public simbolo DENEGAR() throws ParseException {
    jj_consume_token(TOKEN_DENEGAR);
    jj_consume_token(ID);
    jj_consume_token(ID);
    jj_consume_token(PUNTO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POR:{
      jj_consume_token(POR);
      break;
      }
    case ID:{
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PYCOMA);
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<simbolo> DECLARAR() throws ParseException {ArrayList<declaracion> decla = new ArrayList<declaracion>();
ArrayList<simbolo> simb = new ArrayList<simbolo>();
String tipo;
expresion exp=null;
Token t;
Token d;
    d = jj_consume_token(TOKEN_DECLARAR);
    decla = LISTA_VARIABLE();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TEXT:
    case TOKEN_INTEGER:
    case TOKEN_DOUBLE:
    case TOKEN_BOOL:
    case TOKEN_DATE:
    case TOKEN_DATETIME:{
      tipo = TIPO_DATO_DECLARAR();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:{
        jj_consume_token(IGUAL);
        exp = CONDICION();
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
for(int i=0; i < decla.size(); i++){
                                decla.get(i).tipo=tipo;
                                decla.get(i).valor=exp;
                                simb.add(new simbolo(d.beginLine, d.beginColumn,"DECLARACION", "DECLARACION","DECLARACION",decla.get(i).ambito,decla.get(i)));
                        }
      break;
      }
    case ID:{
      t = jj_consume_token(ID);
for(int i=0; i < decla.size(); i++){
                                decla.get(i).tipo=t.image;
                                decla.get(i).valor=exp;
                                simb.add(new simbolo(d.beginLine, d.beginColumn,"DECLARACION", "DECLARACION","DECLARACION",decla.get(i).ambito,decla.get(i)));
                                }
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PYCOMA);
{if ("" != null) return simb;}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<declaracion> LISTA_VARIABLE() throws ParseException {ArrayList<declaracion> decla = new ArrayList<declaracion>();
ArrayList<declaracion>  lista_decla = new ArrayList<declaracion>();
Token t;
String vab;
    t = jj_consume_token(VARIABLE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      lista_decla = LISTA_VARIABLE();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
vab= t.image;
                vab= vab.substring(1, vab.length());
                declaracion d= new declaracion("", vab, new ambito("DECLARACION", new ArrayList<simbolo>()) , null, t.beginLine, t.beginColumn);
                decla.add(d);
                for(int i=0; i < lista_decla.size(); i++){
                        decla.add(lista_decla.get(i));
                }
                {if ("" != null) return decla;}
    throw new Error("Missing return statement in function");
  }

  final public String TIPO_DATO_DECLARAR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TEXT:{
      jj_consume_token(TOKEN_TEXT);
{if ("" != null) return "CADENA";}
      break;
      }
    case TOKEN_INTEGER:{
      jj_consume_token(TOKEN_INTEGER);
{if ("" != null) return "ENTERO";}
      break;
      }
    case TOKEN_DOUBLE:{
      jj_consume_token(TOKEN_DOUBLE);
{if ("" != null) return "DOUBLE";}
      break;
      }
    case TOKEN_BOOL:{
      jj_consume_token(TOKEN_BOOL);
{if ("" != null) return "BOOL";}
      break;
      }
    case TOKEN_DATE:{
      jj_consume_token(TOKEN_DATE);
{if ("" != null) return "DATE";}
      break;
      }
    case TOKEN_DATETIME:{
      jj_consume_token(TOKEN_DATETIME);
{if ("" != null) return "DATETIME";}
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public simbolo ASIGNAR() throws ParseException {Token n1=null, n2=null;
        String vab;
        llamadaVariable llaVa;
        expresion exp;
    n1 = jj_consume_token(VARIABLE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PUNTO:{
      jj_consume_token(PUNTO);
      n2 = jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(IGUAL);
    exp = CONDICION();
    jj_consume_token(PYCOMA);
if (n2!=null){
                                                                vab= n1.image;
                                                                vab= vab.substring(1, vab.length());
                                                                llaVa = new llamadaVariable(vab,n2.image,n1.beginLine, n1.beginColumn);
                                                        }
                                                        else {
                                                                vab= n1.image;
                                                                vab= vab.substring(1, vab.length());
                                                                llaVa = new llamadaVariable(vab,"",n1.beginLine, n1.beginColumn);
                                                        }

                                                        asignacion asi= new asignacion(llaVa,new ambito("ASIGNACION", new ArrayList<simbolo>()),exp);
                                                        {if ("" != null) return new simbolo(n1.beginLine, n1.beginColumn,"ASIGNACION", "ASIGNACION","ASIGNACION",asi.ambito,asi);}
    throw new Error("Missing return statement in function");
  }

  final public simbolo SI() throws ParseException {expresion exp;
ArrayList<simbolo> lsi= new ArrayList<simbolo>();
ArrayList<simbolo> lsino= new ArrayList<simbolo>();
Token t;
    t = jj_consume_token(TOKEN_SI);
    jj_consume_token(PAR_ABRE);
    exp = CONDICION();
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(LLAVE_ABRE);
    lsi = LISTA_SENTENCIA_LOCAL();
    jj_consume_token(LLAVE_CIERRA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_SINO:{
      jj_consume_token(TOKEN_SINO);
      jj_consume_token(LLAVE_ABRE);
      lsino = LISTA_SENTENCIA_LOCAL();
      jj_consume_token(LLAVE_CIERRA);
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      ;
    }
ambito si = new ambito("SI",lsi);
        ambito sino = new ambito("SINO", lsino);
        ambito ambito= new ambito("SI", new ArrayList<simbolo>());

        for(int i=0; i < lsi.size(); i++){
                lsi.get(i).ambito.padre= si;
        }
        for(int i=0; i < lsino.size(); i++){
                lsino.get(i).ambito.padre= sino;
        }

        si s = new si(exp, si, sino, ambito);
        {if ("" != null) return new simbolo(t.beginLine, t.beginColumn,"SI", "SI","SI",s.ambito,s);}
    throw new Error("Missing return statement in function");
  }

  final public simbolo SELECCIONA() throws ParseException {Token t;
expresion exp;
ArrayList<caso> lista_caso = new ArrayList<caso>();
caso def= null;
    t = jj_consume_token(TOKEN_SELECCIONA);
    jj_consume_token(PAR_ABRE);
    exp = CONDICION();
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(LLAVE_ABRE);
    lista_caso = LISTA_CASO();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_DEFECTO:{
      def = DEFECTO();
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    jj_consume_token(LLAVE_CIERRA);
ambito ambito = new ambito("SELECCIONA", new ArrayList<simbolo>());
        for(caso ca: lista_caso){
            for(simbolo sim: ca.ambito.tablaSimbolo){
                sim.ambito.padre = ambito;
            }
        }

        for(simbolo sim: def.ambito.tablaSimbolo){
                sim.ambito.padre = ambito;
        }

        selecciona sele = new selecciona(exp,lista_caso,def,ambito);
        {if ("" != null) return new simbolo(t.beginLine, t.beginColumn,"SELECCIONA", "SELECCIONA","SELECCIONA",sele.ambito,sele);}
    throw new Error("Missing return statement in function");
  }

  final public ArrayList<caso> LISTA_CASO() throws ParseException {Token t;
expresion exp;
ArrayList<simbolo> lista_simb;
ArrayList<caso> lcaso = new ArrayList<caso>();
ArrayList<caso> lista_caso = new ArrayList<caso>();
    t = jj_consume_token(TOKEN_CASO);
    exp = VALOR_CASO();
    jj_consume_token(DOSPUNTOS);
    lista_simb = LISTA_SENTENCIA_LOCAL();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_CASO:{
      lista_caso = LISTA_CASO();
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
ambito ambito = new ambito("CASO", lista_simb);
                for(int i=0; i < lista_simb.size(); i++){
                        lista_simb.get(i).ambito.padre= ambito;
                }

        caso ca = new caso(exp, ambito);
        lcaso.add(ca);
                for(int i=0; i < lista_caso.size(); i++){
                        lcaso.add(lista_caso.get(i));
                }

        {if ("" != null) return lcaso;}
    throw new Error("Missing return statement in function");
  }

  final public expresion VALOR_CASO() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CADENA:{
      t = jj_consume_token(CADENA);
{if ("" != null) return new expresion(null, null, "CADENA", "CADENA", t.beginLine, t.beginColumn, t.image.substring(1, t.image.length()-1));}
      break;
      }
    case ENTERO:{
      t = jj_consume_token(ENTERO);
{if ("" != null) return new expresion(null, null, "ENTERO", "ENTERO", t.beginLine, t.beginColumn,t.image);}
      break;
      }
    case DECIMAL:{
      t = jj_consume_token(DECIMAL);
{if ("" != null) return new expresion(null, null, "DOUBLE", "DOUBLE", t.beginLine, t.beginColumn,t.image);}
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public caso DEFECTO() throws ParseException {ArrayList<simbolo> lista_simb;
    jj_consume_token(TOKEN_DEFECTO);
    jj_consume_token(DOSPUNTOS);
    lista_simb = LISTA_SENTENCIA_LOCAL();
ambito ambito = new ambito("CASO", lista_simb);
                for(int i=0; i < lista_simb.size(); i++){
                        lista_simb.get(i).ambito.padre= ambito;
                }
        {if ("" != null) return new caso(null, ambito);}
    throw new Error("Missing return statement in function");
  }

  final public simbolo PARA() throws ParseException {Token tv, tp, to;
String vab;
expresion exp1,exp2;
ArrayList<simbolo> lista_simb;
    tp = jj_consume_token(TOKEN_PARA);
    jj_consume_token(PAR_ABRE);
    jj_consume_token(TOKEN_DECLARAR);
    tv = jj_consume_token(VARIABLE);
    jj_consume_token(TOKEN_INTEGER);
    jj_consume_token(IGUAL);
    exp1 = CONDICION();
    jj_consume_token(PYCOMA);
    exp2 = CONDICION();
    jj_consume_token(PYCOMA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AUMENTO:{
      to = jj_consume_token(AUMENTO);
      break;
      }
    case DECREMENTO:{
      to = jj_consume_token(DECREMENTO);
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(LLAVE_ABRE);
    lista_simb = LISTA_SENTENCIA_LOCAL();
    jj_consume_token(LLAVE_CIERRA);
vab= tv.image;
            vab= vab.substring(1, vab.length());
            declaracion decla = new declaracion("ENTERO", vab, new ambito("DECLARACION", new ArrayList<simbolo>()), exp1, tp.beginLine, tp.beginColumn);
            simbolo simb_decla = new simbolo( tp.beginLine, tp.beginColumn,"DECLARACION", "DECLARACION", "DECLARACION", new ambito("DECLARACION", new ArrayList<simbolo>()), decla);

            ambito ambito = new ambito("PARA", lista_simb);

                for(int i=0; i < lista_simb.size(); i++){
                        lista_simb.get(i).ambito.padre= ambito;
                }

        para pa = new para(simb_decla,to.image,exp2,ambito);
        {if ("" != null) return new simbolo( tp.beginLine, tp.beginColumn,"PARA","PARA", "PARA", pa.ambito, pa);}
    throw new Error("Missing return statement in function");
  }

  final public simbolo MIENTRAS() throws ParseException {ArrayList<simbolo> lista_simb;
        expresion exp;
        Token t;
    t = jj_consume_token(TOKEN_MIENTRAS);
    jj_consume_token(PAR_ABRE);
    exp = CONDICION();
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(LLAVE_ABRE);
    lista_simb = LISTA_SENTENCIA_LOCAL();
    jj_consume_token(LLAVE_CIERRA);
ambito ambito = new ambito("MIENTRAS", lista_simb);

                for(int i=0; i < lista_simb.size(); i++){
                                lista_simb.get(i).ambito.padre= ambito;
                }

        mientras mien = new mientras(ambito,exp);
        {if ("" != null) return new simbolo(t.beginLine, t.beginColumn,"MIENTRAS","MIENTRAS","MIENTRAS", mien.ambito, mien);}
    throw new Error("Missing return statement in function");
  }

  final public simbolo DETENER() throws ParseException {Token t;
    t = jj_consume_token(TOKEN_DETENER);
    jj_consume_token(PYCOMA);
{if ("" != null) return new simbolo(t.beginLine, t.beginColumn,"DETENER","DETENER","DETENER", new ambito("DETENER", new ArrayList<simbolo>()), null);}
    throw new Error("Missing return statement in function");
  }

  final public void FUNCIONES_PROPIAS_DEL_LENGUAJE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_FECHA:{
      jj_consume_token(TOKEN_FECHA);
      jj_consume_token(PAR_ABRE);
      jj_consume_token(PAR_CIERRA);
      break;
      }
    case TOKEN_FECHA_HORA:{
      jj_consume_token(TOKEN_FECHA_HORA);
      jj_consume_token(PAR_ABRE);
      jj_consume_token(PAR_CIERRA);
      break;
      }
    case TOKEN_CONTAR:{
      jj_consume_token(TOKEN_CONTAR);
      jj_consume_token(PAR_ABRE);
      jj_consume_token(MENOR_2);
      SELECCIONAR();
      jj_consume_token(MAYOR_2);
      jj_consume_token(PAR_CIERRA);
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public simbolo BACKUP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_BACKUP_USQL:{
      jj_consume_token(TOKEN_BACKUP_USQL);
      break;
      }
    case TOKEN_BACKUP_COMPLETO:{
      jj_consume_token(TOKEN_BACKUP_COMPLETO);
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ID);
    jj_consume_token(ID);
    jj_consume_token(PYCOMA);
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public simbolo RESTAURAR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_RESTAURAR_USQL:{
      jj_consume_token(TOKEN_RESTAURAR_USQL);
      break;
      }
    case TOKEN_RESTAURAR_COMPLETO:{
      jj_consume_token(TOKEN_RESTAURAR_COMPLETO);
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CADENA);
    jj_consume_token(PYCOMA);
{if ("" != null) return null;}
    throw new Error("Missing return statement in function");
  }

  final public expresion CONDICION() throws ParseException {expresion nodoizq, nododer, nodo=null;
Token t;
    nodoizq = COND_AND();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        ;
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        break label_1;
      }
      t = jj_consume_token(OR);
      nododer = COND_AND();
nodo= new expresion(nodoizq, nododer, t.image, t.image, t.beginLine, t.beginColumn, null);
    }
if(nodo == null){
                {if ("" != null) return nodoizq;}
        }else{
                {if ("" != null) return nodo;}
        }
    throw new Error("Missing return statement in function");
  }

  final public expresion COND_AND() throws ParseException {expresion nodoizq, nododer,nodo=null;
Token t;
    nodoizq = COND_NOT();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[43] = jj_gen;
        break label_2;
      }
      t = jj_consume_token(AND);
      nododer = COND_NOT();
nodo=new expresion(nodoizq, nododer, t.image, t.image, t.beginLine, t.beginColumn, null);
    }
if(nodo == null){
                {if ("" != null) return nodoizq;}
        }else{
                {if ("" != null) return nodo;}
        }
    throw new Error("Missing return statement in function");
  }

  final public expresion COND_NOT() throws ParseException {expresion nododer;
 Token t=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      t = jj_consume_token(NOT);
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    nododer = REL();
if (t == null){ {if ("" != null) return nododer;}}
        else    {{if ("" != null) return new expresion(null, nododer, t.image, t.image, t.beginLine, t.beginColumn, null);}}
    throw new Error("Missing return statement in function");
  }

  final public expresion REL() throws ParseException {expresion nodoizq, nododer,nodo=null;
Token t;
    nodoizq = EXP();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUALACION:
      case DIFERENTE:
      case MENOR:
      case MAYOR:
      case MENORIGUAL:
      case MAYORIGUAL:{
        ;
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUALACION:{
        t = jj_consume_token(IGUALACION);
        break;
        }
      case DIFERENTE:{
        t = jj_consume_token(DIFERENTE);
        break;
        }
      case MAYOR:{
        t = jj_consume_token(MAYOR);
        break;
        }
      case MENOR:{
        t = jj_consume_token(MENOR);
        break;
        }
      case MAYORIGUAL:{
        t = jj_consume_token(MAYORIGUAL);
        break;
        }
      case MENORIGUAL:{
        t = jj_consume_token(MENORIGUAL);
        break;
        }
      default:
        jj_la1[46] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      nododer = EXP();
nodo= new expresion(nodoizq, nododer, t.image, t.image, t.beginLine, t.beginColumn, null);
    }
if(nodo == null){
                {if ("" != null) return nodoizq;}
        }else{
                {if ("" != null) return nodo;}
        }
    throw new Error("Missing return statement in function");
  }

  final public expresion EXP() throws ParseException {expresion nodoizq, nododer,nodo=null;
 Token t;
    nodoizq = F();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:
      case MENOS:{
        ;
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        break label_4;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:{
        t = jj_consume_token(MAS);
        break;
        }
      case MENOS:{
        t = jj_consume_token(MENOS);
        break;
        }
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      nododer = F();
nodo= new expresion(nodoizq, nododer, t.image, t.image, t.beginLine, t.beginColumn, null);
    }
if(nodo == null){
                {if ("" != null) return nodoizq;}
        }else{
                {if ("" != null) return nodo;}
        }
    throw new Error("Missing return statement in function");
  }

  final public expresion F() throws ParseException {expresion nodoizq, nododer,nodo=null;
 Token t;
    nodoizq = U();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POR:
      case DIVISION:{
        ;
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POR:{
        t = jj_consume_token(POR);
        break;
        }
      case DIVISION:{
        t = jj_consume_token(DIVISION);
        break;
        }
      default:
        jj_la1[50] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      nododer = U();
nodo= new expresion(nodoizq, nododer, t.image, t.image, t.beginLine, t.beginColumn, null);
    }
if(nodo == null){
                {if ("" != null) return nodoizq;}
        }else{
                {if ("" != null) return nodo;}
        }
    throw new Error("Missing return statement in function");
  }

  final public expresion U() throws ParseException {expresion nododer;
 Token t=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MENOS:{
      t = jj_consume_token(MENOS);
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      ;
    }
    nododer = E();
if (t == null){ {if ("" != null) return nododer;}}
        else    {{if ("" != null) return new expresion(null, nododer, t.image, t.image, t.beginLine, t.beginColumn, null);}}
    throw new Error("Missing return statement in function");
  }

  final public expresion E() throws ParseException {expresion nodoizq, nododer,nodo=null;
 Token t;
    nodoizq = H();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POTENCIA:{
        ;
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        break label_6;
      }
      t = jj_consume_token(POTENCIA);
      nododer = H();
nodo= new expresion(nodoizq, nododer, t.image,  t.image, t.beginLine, t.beginColumn, null);
    }
if(nodo == null){
                {if ("" != null) return nodoizq;}
        }else{
                {if ("" != null) return nodo;}
        }
    throw new Error("Missing return statement in function");
  }

  final public expresion H() throws ParseException {Token t, n1=null, n2=null;
 String vab1,vab2;
 llamadaVariable llaVa;
 expresion exp;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VARIABLE:{
      n1 = jj_consume_token(VARIABLE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUNTO:{
        jj_consume_token(PUNTO);
        n2 = jj_consume_token(ID);
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        ;
      }
if (n2!=null){
                                                                                vab1= n1.image;
                                                                                vab1= vab1.substring(1, vab1.length());
                                                                                llaVa = new llamadaVariable(vab1,n2.image,n1.beginLine, n1.beginColumn);
                                                                        }
                                                                        else {
                                        vab1= n1.image;
                                                                                vab1= vab1.substring(1, vab1.length());
                                                                                llaVa = new llamadaVariable(vab1,"",n1.beginLine, n1.beginColumn);
                                                                        }
                                                                        {if ("" != null) return new expresion(null, null, "VARIABLE", "VARIABLE", n1.beginLine, n1.beginColumn, llaVa);}
      break;
      }
    case ID:{
      LLAMADA_METODO_OBJETO();
      break;
      }
    case TOKEN_FECHA:
    case TOKEN_FECHA_HORA:
    case TOKEN_CONTAR:{
      FUNCIONES_PROPIAS_DEL_LENGUAJE();
      break;
      }
    case ENTERO:{
      t = jj_consume_token(ENTERO);
{if ("" != null) return new expresion(null, null, "ENTERO", "ENTERO", t.beginLine, t.beginColumn,t.image);}
      break;
      }
    case CADENA:{
      t = jj_consume_token(CADENA);
{if ("" != null) return new expresion(null, null, "CADENA", "CADENA", t.beginLine, t.beginColumn, t.image.substring(1, t.image.length()-1));}
      break;
      }
    case DECIMAL:{
      t = jj_consume_token(DECIMAL);
{if ("" != null) return new expresion(null, null, "DOUBLE", "DOUBLE", t.beginLine, t.beginColumn,t.image);}
      break;
      }
    case DATE:{
      t = jj_consume_token(DATE);
{if ("" != null) return new expresion(null, null, "DATE", "DATE", t.beginLine, t.beginColumn,t.image);}
      break;
      }
    case DATETIME:{
      t = jj_consume_token(DATETIME);
{if ("" != null) return new expresion(null, null, "DATETIME", "DATETIME", t.beginLine, t.beginColumn,t.image);}
      break;
      }
    case TOKEN_FALSO:{
      t = jj_consume_token(TOKEN_FALSO);
{if ("" != null) return new expresion(null, null, "BOOL", "BOOL", t.beginLine, t.beginColumn,t.image);}
      break;
      }
    case TOKEN_VERDADERO:{
      t = jj_consume_token(TOKEN_VERDADERO);
{if ("" != null) return new expresion(null, null, "BOOL", "BOOL", t.beginLine, t.beginColumn,t.image);}
      break;
      }
    case PAR_ABRE:{
      jj_consume_token(PAR_ABRE);
      exp = CONDICION();
      jj_consume_token(PAR_CIERRA);
{if ("" != null) return exp;}
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public expresion LLAMADA_METODO_OBJETO() throws ParseException {Token n1=null, n2=null, n3=null;
 ArrayList<expresion> exp = new ArrayList<expresion>();
 llamadaTabla llaTab;
 llamadaMetodo llaMe;
    n1 = jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PAR_ABRE:
    case PUNTO:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAR_ABRE:{
        jj_consume_token(PAR_ABRE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PAR_ABRE:
        case MENOS:
        case NOT:
        case TOKEN_FECHA:
        case TOKEN_FECHA_HORA:
        case TOKEN_CONTAR:
        case TOKEN_FALSO:
        case TOKEN_VERDADERO:
        case CADENA:
        case ENTERO:
        case DECIMAL:
        case ID:
        case VARIABLE:
        case DATE:
        case DATETIME:{
          exp = LISTA_COND();
          break;
          }
        default:
          jj_la1[55] = jj_gen;
          ;
        }
        jj_consume_token(PAR_CIERRA);
llaMe = new llamadaMetodo(n1.image,exp,n1.beginLine, n1.beginColumn);
        {if ("" != null) return new expresion(null, null, "METODO", "METODO", n1.beginLine, n1.beginColumn, llaMe);}
        break;
        }
      case PUNTO:{
        jj_consume_token(PUNTO);
        n2 = jj_consume_token(ID);
llaTab = new llamadaTabla(n1.image, "", n2.image, n1.beginLine, n1.beginColumn);
        {if ("" != null) return new expresion(null, null, "TABLA", "TABLA", n1.beginLine, n1.beginColumn, llaTab);}
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case PUNTO:{
          jj_consume_token(PUNTO);
          n3 = jj_consume_token(ID);
llaTab = new llamadaTabla(n1.image, n2.image, n3.image, n1.beginLine, n1.beginColumn);
        {if ("" != null) return new expresion(null, null, "TABLA", "TABLA", n1.beginLine, n1.beginColumn, llaTab);}
          break;
          }
        default:
          jj_la1[56] = jj_gen;
          ;
        }
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[58] = jj_gen;
      ;
    }
llaTab = new llamadaTabla("", n1.image, "", n1.beginLine, n1.beginColumn);
        {if ("" != null) return new expresion(null, null, "TABLA", "TABLA", n1.beginLine, n1.beginColumn, llaTab);}
    throw new Error("Missing return statement in function");
  }

  final public simbolo LLAMADA_METODO_FUNCION() throws ParseException {Token t;
ArrayList<expresion> lexp= new ArrayList<expresion>();
expresion exp=null;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      t = jj_consume_token(ID);
      jj_consume_token(PAR_ABRE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAR_ABRE:
      case MENOS:
      case NOT:
      case TOKEN_FECHA:
      case TOKEN_FECHA_HORA:
      case TOKEN_CONTAR:
      case TOKEN_FALSO:
      case TOKEN_VERDADERO:
      case CADENA:
      case ENTERO:
      case DECIMAL:
      case ID:
      case VARIABLE:
      case DATE:
      case DATETIME:{
        lexp = LISTA_COND();
        break;
        }
      default:
        jj_la1[59] = jj_gen;
        ;
      }
      jj_consume_token(PAR_CIERRA);
      jj_consume_token(PYCOMA);
llamadaMetodo llaMe = new llamadaMetodo(t.image,lexp,t.beginLine, t.beginColumn);
                                                                                                                                        {if ("" != null) return new simbolo(t.beginLine, t.beginColumn,"METODO","METODO","METODO", new ambito("METODO", new ArrayList<simbolo>()), llaMe);}
      break;
      }
    case TOKEN_IMPRIMIR:{
      t = jj_consume_token(TOKEN_IMPRIMIR);
      jj_consume_token(PAR_ABRE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAR_ABRE:
      case MENOS:
      case NOT:
      case TOKEN_FECHA:
      case TOKEN_FECHA_HORA:
      case TOKEN_CONTAR:
      case TOKEN_FALSO:
      case TOKEN_VERDADERO:
      case CADENA:
      case ENTERO:
      case DECIMAL:
      case ID:
      case VARIABLE:
      case DATE:
      case DATETIME:{
        exp = CONDICION();
        break;
        }
      default:
        jj_la1[60] = jj_gen;
        ;
      }
      jj_consume_token(PAR_CIERRA);
      jj_consume_token(PYCOMA);
imprimir imp = new imprimir(exp);
                                                                                                                                                        {if ("" != null) return new simbolo(t.beginLine, t.beginColumn,"IMPRIMIR","IMPRIMIR","IMPRIMIR", new ambito("IMPRIMIR", new ArrayList<simbolo>()), imp);}
      break;
      }
    default:
      jj_la1[61] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  /** Generated Token Manager. */
  public analizadorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[62];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static private int[] jj_la1_3;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
      jj_la1_init_3();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000000,0x10000000,0x0,0x0,0x60000000,0x40,0x80000000,0x80000000,0x80000000,0x0,0x40,0x0,0x40,0x0,0x40,0x40000000,0x40,0x0,0x0,0x60000000,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x1000,0x1000,0x100,0x0,0x40,0x0,0x200,0x0,0x0,0x0,0x0,0x18000,0x0,0x0,0x0,0x1000000,0x800000,0x2000000,0x7e0000,0x7e0000,0xc00,0xc00,0x3000,0x3000,0x800,0x4000,0x200,0x2,0x2000802,0x200,0x202,0x202,0x2000802,0x2000802,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x786b1800,0x786b1800,0x606a0080,0x606a0080,0x170,0x0,0xf,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x110,0x0,0x6000,0x6000,0x110,0x0,0x100000,0x100000,0x0,0x100000,0x6000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0xc003c59,0xc003c59,0xc000079,0xc000079,0x0,0x0,0x0,0x0,0x0,0x40fc000,0x0,0x40fc000,0x0,0x40fc000,0x0,0x0,0x0,0x0,0x0,0x0,0x4000000,0x0,0x0,0x4000000,0x0,0x0,0x0,0x4000000,0x4000000,0x0,0x40fc000,0x0,0xfc000,0x0,0x0,0x4,0x2,0x2c00000,0x0,0x380,0xc00,0x3000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3ef00380,0x3ef00380,0x0,0x0,0x0,0x3ef00380,0x3ef00380,0x4000040,};
   }
   private static void jj_la1_init_3() {
      jj_la1_3 = new int[] {0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public analizador(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new analizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public analizador(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new analizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public analizador(analizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(analizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 62; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[100];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 62; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
          if ((jj_la1_3[i] & (1<<j)) != 0) {
            la1tokens[96+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 100; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
