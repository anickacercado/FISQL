options {
IGNORE_CASE = true;
STATIC = false;
    OUTPUTOKEN_DIRECTORY="C://Users//anick//Documents//NetBeansProjects//[Compi2]Proyecto1_201212859//FISQL//src//xml//funcion//";  
    /*OUTPUTOKEN_DIRECTORY="C://Users//3plgtanickacf//Documents//GitHub//FISQL//src//xml//funcion//";*/
}

PARSER_BEGIN(funcion)
package xml.funcion;

public class funcion {
  public static void main(String args[]) throws ParseException {
    funcion parser = new funcion(System.in);
    parser.S();
    System.out.println("Exito!!");
  }
}
PARSER_END(funcion)

TOKEN:
{   
  
  <TOKEN_FUNC_ABRE: ("<func>")> {System.out.println(image);}
  |<TOKEN_FUNC_CIERRA: ("</func>")> {System.out.println(image);}
  |<TOKEN_NOMBRE_ABRE: ("<nombre>")> {System.out.println(image);}
  |<TOKEN_NOMBRE_CIERRA: ("</nombre>")> {System.out.println(image);}
  |<TOKEN_PARAMS_ABRE: ("<params>")> {System.out.println(image);}
  |<TOKEN_PARAMS_CIERRA: ("</params>")> {System.out.println(image);}
  |<TOKEN_SRC_ABRE: ("<src>")> {System.out.println(image);}
  |<TOKEN_SRC_CIERRA: ("</src>")> {System.out.println(image);}
  |<TOKEN_TEXT_ABRE: ("<text>")> {System.out.println(image);}
  |<TOKEN_TEXT_CIERRA: ("</text>")> {System.out.println(image);}
  |<TOKEN_INTEGER_ABRE: ("<integer>")> {System.out.println(image);}
  |<TOKEN_INTEGER_CIERRA: ("</integer>")> {System.out.println(image);}
  |<TOKEN_DOUBLE_ABRE: ("<double>")> {System.out.println(image);}
  |<TOKEN_DOUBLE_CIERRA: ("</double>")> {System.out.println(image);}
  |<TOKEN_BOOL_ABRE: ("<bool>")> {System.out.println(image);}
  |<TOKEN_BOOL_CIERRA: ("</bool>")> {System.out.println(image);}
  |<TOKEN_DATE_ABRE: ("<date>")> {System.out.println(image);}
  |<TOKEN_DATE_CIERRA: ("</date>")> {System.out.println(image);}
  |<TOKEN_DATETIME_ABRE: ("<datetime>")> {System.out.println(image);}
  |<TOKEN_DATETIME_CIERRA: ("</datetime>")> {System.out.println(image);}
  |<TOKEN_TIPO_ABRE: ("<tipo>")> {System.out.println(image);}
  |<TOKEN_TIPO_CIERRA: ("</tipo>")> {System.out.println(image);}

  |<TOKEN_ID_ABRE: ("<")(["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* (">")> {System.out.println(image);}
  |<TOKEN_ID_CIERRA: ("</")(["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* (">")> {System.out.println(image);}
  |<CADENA:"\"" (~["\""])*"\""> {System.out.println(image);}
  |<CODIGO:"\u007e" (~["\u007e"])* "\u007e"> {System.out.println(image);}
}

SKIP: 
{
  " "
| "\n"
| "\r"
| "\t"
}

void S():
{}
{
   FUNC()
}


void FUNC():
{}
{
        (
        <TOKEN_FUNC_ABRE> 
            <TOKEN_NOMBRE_ABRE> <CADENA> <TOKEN_NOMBRE_CIERRA>
                <TOKEN_PARAMS_ABRE> LISTA_PARAMS() <TOKEN_PARAMS_CIERRA>    
            <TOKEN_SRC_ABRE> <CODIGO> <TOKEN_SRC_CIERRA>
            <TOKEN_TIPO_ABRE> <CADENA> <TOKEN_TIPO_CIERRA>
        <TOKEN_FUNC_CIERRA>
        ) 
        (FUNC())?
}


void LISTA_PARAMS():
{}
{
        PARAMS() (LISTA_PARAMS())?
}

void PARAMS():
{}
{
     <TOKEN_INTEGER_ABRE> <CADENA> <TOKEN_INTEGER_CIERRA>
    |<TOKEN_TEXT_ABRE> <CADENA> <TOKEN_TEXT_CIERRA>
    |<TOKEN_DOUBLE_ABRE> <CADENA> <TOKEN_DOUBLE_CIERRA>
    |<TOKEN_BOOL_ABRE> <CADENA> <TOKEN_BOOL_CIERRA>
    |<TOKEN_DATE_ABRE> <CADENA> <TOKEN_DATE_CIERRA>
    |<TOKEN_DATETIME_ABRE> <CADENA> <TOKEN_DATETIME_CIERRA>
    |<TOKEN_ID_ABRE> <CADENA> <TOKEN_ID_CIERRA>
}


