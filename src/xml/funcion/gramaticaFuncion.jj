options {
IGNORE_CASE = true;
STATIC = false;
    OUTPUTOKEN_DIRECTORY="C://Users//anick//Documents//NetBeansProjects//[Compi2]Proyecto1_201212859//FISQL//src//xml//funcion//";  
}

PARSER_BEGIN(funcion)
package xml.funcion;
import java.util.ArrayList;
import archivos.*;
import archivos.metodo.*;

public class funcion {
  private ArrayList<parametro> lp= new ArrayList<parametro>();
  private ArrayList<function> lf = new ArrayList<function>();
  private String nombre_fun, nombre_param, codigo, tipo, retorna;

  public static void main(String args[]) throws ParseException {
    funcion parser = new funcion(System.in);
    parser.S();
  }
}
PARSER_END(funcion)

TOKEN:
{   
  
  <TOKEN_FUNC_ABRE: ("<func>")> {System.out.println(image);}
  |<TOKEN_FUNC_CIERRA: ("</func>")> {System.out.println(image);}
  |<TOKEN_NOMBRE_ABRE: ("<nombre>")> {System.out.println(image);}
  |<TOKEN_NOMBRE_CIERRA: ("</nombre>")> {System.out.println(image);}
  |<TOKEN_PARAMS_ABRE: ("<params>")> {System.out.println(image);}
  |<TOKEN_PARAMS_CIERRA: ("</params>")> {System.out.println(image);}
  |<TOKEN_SRC_ABRE: ("<src>")> {System.out.println(image);}
  |<TOKEN_SRC_CIERRA: ("</src>")> {System.out.println(image);}
  |<TOKEN_TEXT_ABRE: ("<cadena>")> {System.out.println(image);}
  |<TOKEN_TEXT_CIERRA: ("</cadena>")> {System.out.println(image);}
  |<TOKEN_INTEGER_ABRE: ("<entero>")> {System.out.println(image);}
  |<TOKEN_INTEGER_CIERRA: ("</entero>")> {System.out.println(image);}
  |<TOKEN_DOUBLE_ABRE: ("<double>")> {System.out.println(image);}
  |<TOKEN_DOUBLE_CIERRA: ("</double>")> {System.out.println(image);}
  |<TOKEN_BOOL_ABRE: ("<bool>")> {System.out.println(image);}
  |<TOKEN_BOOL_CIERRA: ("</bool>")> {System.out.println(image);}
  |<TOKEN_DATE_ABRE: ("<date>")> {System.out.println(image);}
  |<TOKEN_DATE_CIERRA: ("</date>")> {System.out.println(image);}
  |<TOKEN_DATETIME_ABRE: ("<datetime>")> {System.out.println(image);}
  |<TOKEN_DATETIME_CIERRA: ("</datetime>")> {System.out.println(image);}
  |<TOKEN_TIPO_ABRE: ("<tipo>")> {System.out.println(image);}
  |<TOKEN_TIPO_CIERRA: ("</tipo>")> {System.out.println(image);}

  |<TOKEN_ID_ABRE: ("<")(["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* (">")> {System.out.println(image);}
  |<TOKEN_ID_CIERRA: ("</")(["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* (">")> {System.out.println(image);}
  |<CADENA:"\"" (~["\""])*"\""> {System.out.println(image);}
  |<CODIGO:"\u007e" (~["\u007e"])* "\u007e"> {System.out.println(image);}
}

SKIP: 
{
  " "
| "\n"
| "\r"
| "\t"
}

ArrayList<function> S():
{}
{
   FUNC() {return lf;}
}


void FUNC():
{Token t,cod,ret;}
{
        (
        <TOKEN_FUNC_ABRE> 
            <TOKEN_NOMBRE_ABRE> t=<CADENA> <TOKEN_NOMBRE_CIERRA>
                <TOKEN_PARAMS_ABRE> LISTA_PARAMS() <TOKEN_PARAMS_CIERRA>    
            <TOKEN_SRC_ABRE> cod=<CODIGO> <TOKEN_SRC_CIERRA>
            <TOKEN_TIPO_ABRE> ret=<CADENA> <TOKEN_TIPO_CIERRA>
        <TOKEN_FUNC_CIERRA>
        ) 
        {
            nombre_fun= t.image;
            nombre_fun= nombre_fun.substring(1, nombre_fun.length()-1);
            codigo = cod.image;
            codigo = codigo.substring(1, codigo.length()-1);
            retorna = ret.image;
            retorna = retorna.substring(1, retorna.length()-1);
            function f= new function(nombre_fun,lp,codigo,retorna);
            lf.add(f);
            lp= new ArrayList<parametro>();    
        }
        (FUNC())?
}


void LISTA_PARAMS():
{}
{
        PARAMS() (LISTA_PARAMS())?
}

void PARAMS():
{Token t,tip;}
{
   <TOKEN_INTEGER_ABRE> t=<CADENA> <TOKEN_INTEGER_CIERRA> {
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                parametro p=new parametro(nombre_param,"ENTERO");
                                                                lp.add(p);
                                                            }
    |<TOKEN_TEXT_ABRE> t=<CADENA> <TOKEN_TEXT_CIERRA>       {
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                parametro p=new parametro(nombre_param,"CADENA");
                                                                lp.add(p);                                                            
                                                            }
    |<TOKEN_DOUBLE_ABRE> t=<CADENA> <TOKEN_DOUBLE_CIERRA>   {
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                parametro p=new parametro(nombre_param,"DOUBLE");
                                                                lp.add(p);  
                                                            }
    |<TOKEN_BOOL_ABRE> t=<CADENA> <TOKEN_BOOL_CIERRA>       {
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                parametro p=new parametro(nombre_param,"BOOL");
                                                                lp.add(p);  
                                                            }
    |<TOKEN_DATE_ABRE> t=<CADENA> <TOKEN_DATE_CIERRA>       {
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                parametro p=new parametro(nombre_param,"DATE");
                                                                lp.add(p);  
                                                            }
    |<TOKEN_DATETIME_ABRE> t=<CADENA> <TOKEN_DATETIME_CIERRA> {
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                parametro p=new parametro(nombre_param,"DATETIME");
                                                                lp.add(p);
                                                              } 
    |tip=<TOKEN_ID_ABRE> t=<CADENA> <TOKEN_ID_CIERRA>         {
                                                                tipo = tip.image;
                                                                tipo = tipo.substring(1, tipo.length()-1);
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                parametro p=new parametro(nombre_param,tipo);
                                                                lp.add(p);
                                                              } 
}


