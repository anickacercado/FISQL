options {
IGNORE_CASE = true;
STATIC = false;
    OUTPUTOKEN_DIRECTORY="C://Users//anick//Documents//NetBeansProjects//[Compi2]Proyecto1_201212859//FISQL//src//xml//db//";
}

PARSER_BEGIN(db)
package xml.db;
import java.util.ArrayList;
import archivos.*;
import archivos.db.*;

public class db {
  private String tipo,nombre,path,nombre_param;
  private ArrayList<parametro> lp= new ArrayList<parametro>();
  private ArrayList<database> ldb= new ArrayList<database>();

  public static void main(String args[]) throws ParseException {
    db parser = new db(System.in);
    parser.S();
  }
}
PARSER_END(db)

TOKEN:
{   
   <TOKEN_PROCEDURE_ABRE: ("<procedure>")> {System.out.println(image);}
  |<TOKEN_PROCEDURE_CIERRA: ("</procedure>")> {System.out.println(image);}
  |<TOKEN_PATH_ABRE: ("<path>")> {System.out.println(image);}
  |<TOKEN_PATH_CIERRA: ("</path>")> {System.out.println(image);}
  |<TOKEN_NOMBRE_ABRE: ("<nombre>")> {System.out.println(image);}
  |<TOKEN_NOMBRE_CIERRA: ("</nombre>")> {System.out.println(image);}
  |<TOKEN_OBJECT_ABRE: ("<object>")> {System.out.println(image);}
  |<TOKEN_OBJECT_CIERRA: ("</object>")> {System.out.println(image);}
  |<TOKEN_ROWS_ABRE: ("<rows>")> {System.out.println(image);}
  |<TOKEN_ROWS_CIERRA: ("</rows>")> {System.out.println(image);}
  |<TOKEN_TEXT_ABRE: ("<text>")> {System.out.println(image);}
  |<TOKEN_TEXT_CIERRA: ("</text>")> {System.out.println(image);}
  |<TOKEN_INTEGER_ABRE: ("<integer>")> {System.out.println(image);}
  |<TOKEN_INTEGER_CIERRA: ("</integer>")> {System.out.println(image);}
  |<TOKEN_DOUBLE_ABRE: ("<double>")> {System.out.println(image);}
  |<TOKEN_DOUBLE_CIERRA: ("</double>")> {System.out.println(image);}
  |<TOKEN_BOOL_ABRE: ("<bool>")> {System.out.println(image);}
  |<TOKEN_BOOL_CIERRA: ("</bool>")> {System.out.println(image);}
  |<TOKEN_DATE_ABRE: ("<date>")> {System.out.println(image);}
  |<TOKEN_DATE_CIERRA: ("</date>")> {System.out.println(image);}
  |<TOKEN_DATETIME_ABRE: ("<datetime>")> {System.out.println(image);}
  |<TOKEN_DATETIME_CIERRA: ("</datetime>")> {System.out.println(image);}
  |<TOKEN_TABLA_ABRE: ("<tabla>")> {System.out.println(image);}
  |<TOKEN_TABLA_CIERRA: ("</tabla>")> {System.out.println(image);}


  |<TOKEN_ID_ABRE: ("<")(["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* (">")> {System.out.println(image);}
  |<TOKEN_ID_CIERRA: ("</")(["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* (">")> {System.out.println(image);}
  

  |<CADENA:"\"" (~["\""])*"\""> {System.out.println(image);}
}

SKIP: 
{
  " "
| "\n"
| "\r"
| "\t"
}

ArrayList<database> S():
{}
{
   LISTA_REGISTRO() {return ldb;}
}

void LISTA_REGISTRO():
{}
{
    (PROCEDURE() | OBJECT() | TABLA()) (LISTA_REGISTRO())?
}


void PROCEDURE():
{Token p;}
{
     <TOKEN_PROCEDURE_ABRE>
     <TOKEN_PATH_ABRE> p=<CADENA> <TOKEN_PATH_CIERRA>
     <TOKEN_PROCEDURE_CIERRA>
     {
     path= p.image;
     path= path.substring(1, path.length()-1);
     database data = new database("PROCEDURE",null,path,null);
     ldb.add(data);
     }

}

void OBJECT():
{Token p;}
{
     <TOKEN_OBJECT_ABRE>
     <TOKEN_PATH_ABRE> p=<CADENA> <TOKEN_PATH_CIERRA>
     <TOKEN_OBJECT_CIERRA>
     {
     path= p.image;
     path= path.substring(1, path.length()-1);
     database data = new database("OBJECT",null,path,null);
     ldb.add(data);
     }
}

void TABLA():
{Token n,p;}
{
     <TOKEN_TABLA_ABRE>
     <TOKEN_NOMBRE_ABRE> n=<CADENA> <TOKEN_NOMBRE_CIERRA>
     <TOKEN_PATH_ABRE> p=<CADENA> <TOKEN_PATH_CIERRA>
     <TOKEN_ROWS_ABRE> LISTA_TIPO() <TOKEN_ROWS_CIERRA>
     <TOKEN_TABLA_CIERRA>
    {
        nombre= n.image;
        nombre= nombre.substring(1, nombre.length()-1);
        path= p.image;
        path= path.substring(1, path.length()-1);
        database data = new database("TABLA",nombre,path,lp);
        ldb.add(data);
        lp= new ArrayList<parametro>();
 
    }

}

void LISTA_TIPO():
{}
{
    TIPO() (LISTA_TIPO())?
}

void TIPO():
{Token t,tip;}
{
   <TOKEN_INTEGER_ABRE> t=<CADENA> <TOKEN_INTEGER_CIERRA> {
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                parametro p=new parametro(nombre_param,"INTEGER");
                                                                lp.add(p);
                                                            }
    |<TOKEN_TEXT_ABRE> t=<CADENA> <TOKEN_TEXT_CIERRA>       {
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                parametro p=new parametro(nombre_param,"TEXT");
                                                                lp.add(p);                                                            
                                                            }
    |<TOKEN_DOUBLE_ABRE> t=<CADENA> <TOKEN_DOUBLE_CIERRA>   {
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                parametro p=new parametro(nombre_param,"DOUBLE");
                                                                lp.add(p);  
                                                            }
    |<TOKEN_BOOL_ABRE> t=<CADENA> <TOKEN_BOOL_CIERRA>       {
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                parametro p=new parametro(nombre_param,"BOOL");
                                                                lp.add(p);  
                                                            }
    |<TOKEN_DATE_ABRE> t=<CADENA> <TOKEN_DATE_CIERRA>       {
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                parametro p=new parametro(nombre_param,"DATE");
                                                                lp.add(p);  
                                                            }
    |<TOKEN_DATETIME_ABRE> t=<CADENA> <TOKEN_DATETIME_CIERRA> {
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                parametro p=new parametro(nombre_param,"DATETIME");
                                                                lp.add(p);
                                                              } 
    |tip=<TOKEN_ID_ABRE> t=<CADENA> <TOKEN_ID_CIERRA>         {
                                                                tipo = tip.image;
                                                                tipo = tipo.substring(1, tipo.length()-1);
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                parametro p=new parametro(nombre_param,tipo);
                                                                lp.add(p);
                                                              } 
}




