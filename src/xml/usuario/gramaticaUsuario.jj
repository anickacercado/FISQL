options {
IGNORE_CASE = true;
STATIC = false;
    OUTPUTOKEN_DIRECTORY="C://Users//anick//Documents//NetBeansProjects//[Compi2]Proyecto1_201212859//FISQL//src//xml//usuario//";
    /*OUTPUTOKEN_DIRECTORY="C://Users//3plgtanickacf//Documents//GitHub//FISQL//src//xml//tabla//";*/
}

PARSER_BEGIN(usuario)
package xml.usuario;
import java.util.ArrayList;
import archivos.usuario.*;

public class usuario {
  private ArrayList<String> lt= new ArrayList<String>();
  private ArrayList<String> lo= new ArrayList<String>();
  private ArrayList<String> lf= new ArrayList<String>();
  private ArrayList<String> lp= new ArrayList<String>();
  private ArrayList<permisos> lista_permisos= new ArrayList<permisos>();
  private ArrayList<user> lista_usuarios= new ArrayList<user>();
  private String nombre_usuario,nombre_bd,pass,tipo,estado;
  private String opcion;

  public static void main(String args[]) throws ParseException {
    usuario parser = new usuario(System.in);
    parser.S();
  }
}
PARSER_END(usuario)

TOKEN:
{   
  
  <TOKEN_USR_ABRE: ("<usr>")> {System.out.println(image);}
  |<TOKEN_USR_CIERRA: ("</usr>")> {System.out.println(image);}
  |<TOKEN_NOMBRE_ABRE: ("<nombre>")> {System.out.println(image);}
  |<TOKEN_NOMBRE_CIERRA: ("</nombre>")> {System.out.println(image);}
  |<TOKEN_PASS_ABRE: ("<pass>")> {System.out.println(image);}
  |<TOKEN_PASS_CIERRA: ("</pass>")> {System.out.println(image);}
  |<TOKEN_TIPO_ABRE: ("<tipo>")> {System.out.println(image);}
  |<TOKEN_TIPO_CIERRA: ("</tipo>")> {System.out.println(image);}
  |<TOKEN_ESTADO_ABRE: ("<estado>")> {System.out.println(image);}
  |<TOKEN_ESTADO_CIERRA: ("</estado>")> {System.out.println(image);}
  |<TOKEN_PERMISO_ABRE: ("<permiso>")> {System.out.println(image);}
  |<TOKEN_PERMISO_CIERRA: ("</permiso>")> {System.out.println(image);}
  |<TOKEN_DB_ABRE: ("<db>")> {System.out.println(image);}
  |<TOKEN_DB_CIERRA: ("</db>")> {System.out.println(image);}
  |<TOKEN_TABLA_ABRE: ("<tabla>")> {System.out.println(image);}
  |<TOKEN_TABLA_CIERRA: ("</tabla>")> {System.out.println(image);}
  |<TOKEN_OBJ_ABRE: ("<obj>")> {System.out.println(image);}
  |<TOKEN_OBJ_CIERRA: ("</obj>")> {System.out.println(image);}
  |<TOKEN_FUNC_ABRE: ("<func>")> {System.out.println(image);}
  |<TOKEN_FUNC_CIERRA: ("</func>")> {System.out.println(image);}
  |<TOKEN_PROC_ABRE: ("<proc>")> {System.out.println(image);}
  |<TOKEN_PROC_CIERRA: ("</proc>")> {System.out.println(image);}

  |<CADENA:"\"" (~["\""])*"\""> {System.out.println(image);}
}

SKIP: 
{
  " "
| "\n"
| "\r"
| "\t"
}

ArrayList<user> S():
{}
{
   USR(){return lista_usuarios;}
}


void USR():
{Token n; Token p; Token t; Token e;}
{
     (<TOKEN_USR_ABRE> 
        <TOKEN_NOMBRE_ABRE> n=<CADENA> <TOKEN_NOMBRE_CIERRA> {nombre_usuario=n.image;}
        <TOKEN_PASS_ABRE> p=<CADENA> <TOKEN_PASS_CIERRA> {pass=p.image;}
        <TOKEN_TIPO_ABRE> t=<CADENA> <TOKEN_TIPO_CIERRA> {tipo=t.image;}
        <TOKEN_ESTADO_ABRE> e=<CADENA> <TOKEN_ESTADO_CIERRA> {estado=e.image;}
        <TOKEN_PERMISO_ABRE> (DB())? 
                {
                    nombre_usuario= nombre_usuario.substring(1, nombre_usuario.length()-1);
                    pass= pass.substring(1, pass.length()-1);
                    tipo= tipo.substring(1, tipo.length()-1);
                    estado= estado.substring(1, estado.length()-1);
                    
                    user u= new user(nombre_usuario,pass,tipo,estado,lista_permisos);
                    lista_usuarios.add(u);
                    
                    lista_permisos= new ArrayList<permisos>();
                }
        <TOKEN_PERMISO_CIERRA> 
       <TOKEN_USR_CIERRA>) 
       (USR())?
}

void DB():
{Token t;}
{
    (<TOKEN_DB_ABRE> 
        <TOKEN_NOMBRE_ABRE> t=<CADENA> <TOKEN_NOMBRE_CIERRA> {nombre_bd=t.image;}
        (LISTA_OPCION())? {
                            nombre_bd= nombre_bd.substring(1, nombre_bd.length()-1);
                            permisos p= new permisos(nombre_bd,lt,lo,lf,lp);
                            lista_permisos.add(p);
                            lt= new ArrayList<String>();
                            lo= new ArrayList<String>();
                            lf= new ArrayList<String>();
                            lp= new ArrayList<String>();
                          }
    <TOKEN_DB_CIERRA>)
    (DB())?
}

void LISTA_OPCION():
{}
{
    OPCION() (LISTA_OPCION())?
}

void OPCION():
{Token t;}
{
    <TOKEN_TABLA_ABRE> t=<CADENA> <TOKEN_TABLA_CIERRA> {
                                                        opcion= t.image;
                                                        opcion= opcion.substring(1, opcion.length()-1);
                                                        lt.add(opcion);
                                                        }
    |<TOKEN_OBJ_ABRE>  t=<CADENA> <TOKEN_OBJ_CIERRA>   {
                                                        opcion= t.image;
                                                        opcion= opcion.substring(1, opcion.length()-1);
                                                        lo.add(opcion);
                                                        }
    |<TOKEN_FUNC_ABRE> t=<CADENA> <TOKEN_FUNC_CIERRA>  {
                                                        opcion= t.image;
                                                        opcion= opcion.substring(1, opcion.length()-1);
                                                        lf.add(t.image);
                                                        }   
    |<TOKEN_PROC_ABRE> t=<CADENA> <TOKEN_PROC_CIERRA>  {
                                                        opcion= t.image;
                                                        opcion= opcion.substring(1, opcion.length()-1);
                                                        lp.add(opcion);
                                                        }
}








