/* analizadorTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. analizadorTokenManager.java */
package analizador;

/** Token Manager. */
@SuppressWarnings("unused")public class analizadorTokenManager implements analizadorConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffff00000000L) != 0L || (active1 & 0xffffffL) != 0L)
         {
            jjmatchedKind = 92;
            return 4;
         }
         return -1;
      case 1:
         if ((active1 & 0x93d2L) != 0L)
            return 4;
         if ((active0 & 0xffffffff00000000L) != 0L || (active1 & 0xff6c2dL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 1;
            }
            return 4;
         }
         return -1;
      case 2:
         if ((active1 & 0x8L) != 0L)
            return 4;
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 1;
            }
            return -1;
         }
         if ((active0 & 0xfffffbff00000000L) != 0L || (active1 & 0xfffef5L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 2;
            return 4;
         }
         return -1;
      case 3:
         if ((active0 & 0xffdff9c600000000L) != 0L || (active1 & 0xffd4e5L) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 3;
            }
            return 4;
         }
         if ((active0 & 0x20023900000000L) != 0L || (active1 & 0x2a10L) != 0L)
            return 4;
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 4:
         if ((active0 & 0xbfdff8a600000000L) != 0L || (active1 & 0xf9d4e5L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 4;
            }
            return 4;
         }
         if ((active0 & 0x4000014000000000L) != 0L || (active1 & 0x60000L) != 0L)
            return 4;
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 5:
         if ((active0 & 0xbedfb8a200000000L) != 0L || (active1 & 0xf5d4e5L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 5;
            return 4;
         }
         if ((active0 & 0x100400400000000L) != 0L || (active1 & 0x80000L) != 0L)
            return 4;
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 6:
         if ((active0 & 0x2c10b8a000000000L) != 0L || (active1 & 0xc544e5L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 6;
            return 4;
         }
         if ((active0 & 0x12cf000200000000L) != 0L || (active1 & 0x9000L) != 0L)
            return 4;
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x300000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active0 & 0x40000000000L) != 0L)
         {
            if (jjmatchedPos < 1)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 1;
            }
            return -1;
         }
         return -1;
      case 7:
         if ((active0 & 0x2800b88000000000L) != 0L || (active1 & 0xc40401L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 7;
            return 4;
         }
         if ((active0 & 0x410002000000000L) != 0L || (active1 & 0x14080L) != 0L)
            return 4;
         if ((active1 & 0x64L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x300000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 8:
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x2000b88000000000L) != 0L || (active1 & 0xc40401L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 8;
            return 4;
         }
         if ((active1 & 0x64L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x8000000000000000L) != 0L || (active1 & 0x300000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 5;
            }
            return -1;
         }
         return -1;
      case 9:
         if ((active1 & 0xc00000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0x2000008000000000L) != 0L || (active1 & 0x40401L) != 0L)
            return 4;
         if ((active1 & 0x300000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x64L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0xb80000000000L) != 0L)
         {
            if (jjmatchedPos != 9)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 9;
            }
            return 4;
         }
         return -1;
      case 10:
         if ((active1 & 0xc00000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x1L) != 0L)
            return 4;
         if ((active0 & 0x800000000000000L) != 0L)
         {
            if (jjmatchedPos < 7)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 7;
            }
            return -1;
         }
         if ((active0 & 0xb80000000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 10;
            return 4;
         }
         if ((active1 & 0x300000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x64L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 6;
            }
            return -1;
         }
         return -1;
      case 11:
         if ((active1 & 0xc00000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x300000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x60L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0xb80000000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 11;
            return 4;
         }
         return -1;
      case 12:
         if ((active1 & 0xc00000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0xa00000000000L) != 0L)
            return 4;
         if ((active1 & 0x300000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x60L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x180000000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 12;
            return 4;
         }
         return -1;
      case 13:
         if ((active1 & 0xc00000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x100000000000L) != 0L)
            return 4;
         if ((active1 & 0x300000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x60L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 13;
            return 4;
         }
         return -1;
      case 14:
         if ((active1 & 0xc00000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x300000L) != 0L)
         {
            if (jjmatchedPos < 5)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 5;
            }
            return -1;
         }
         if ((active1 & 0x60L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 14;
            return 4;
         }
         return -1;
      case 15:
         if ((active1 & 0xc00000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active1 & 0x60L) != 0L)
         {
            if (jjmatchedPos < 6)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 6;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
         {
            jjmatchedKind = 92;
            jjmatchedPos = 15;
            return 4;
         }
         return -1;
      case 16:
         if ((active1 & 0xc00000L) != 0L)
         {
            if (jjmatchedPos < 8)
            {
               jjmatchedKind = 92;
               jjmatchedPos = 8;
            }
            return -1;
         }
         if ((active0 & 0x80000000000L) != 0L)
            return 4;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 29;
         return jjMoveStringLiteralDfa1_0(0x400000L, 0x0L);
      case 38:
         return jjMoveStringLiteralDfa1_0(0x8000000L, 0x0L);
      case 40:
         return jjStopAtPos(0, 10);
      case 41:
         return jjStopAtPos(0, 11);
      case 42:
         return jjStopAtPos(0, 3);
      case 43:
         jjmatchedKind = 1;
         return jjMoveStringLiteralDfa1_0(0x140L, 0x0L);
      case 44:
         return jjStopAtPos(0, 17);
      case 45:
         jjmatchedKind = 2;
         return jjMoveStringLiteralDfa1_0(0x280L, 0x0L);
      case 46:
         return jjStopAtPos(0, 20);
      case 47:
         return jjStopAtPos(0, 4);
      case 58:
         return jjStopAtPos(0, 18);
      case 59:
         return jjStopAtPos(0, 16);
      case 60:
         jjmatchedKind = 23;
         return jjMoveStringLiteralDfa1_0(0x42000000L, 0x0L);
      case 61:
         jjmatchedKind = 19;
         return jjMoveStringLiteralDfa1_0(0x200000L, 0x0L);
      case 62:
         jjmatchedKind = 24;
         return jjMoveStringLiteralDfa1_0(0x84000000L, 0x0L);
      case 91:
         return jjStopAtPos(0, 14);
      case 93:
         return jjStopAtPos(0, 15);
      case 94:
         return jjStopAtPos(0, 5);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa1_0(0x20c0080000000000L, 0x8L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa1_0(0x8000008800000000L, 0x300000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa1_0(0x208004000000000L, 0x80800L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa1_0(0x4000003400000000L, 0x90d2L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa1_0(0x400000000000000L, 0x0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L, 0x60000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa1_0(0x800000200000000L, 0x10000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa1_0(0x300000000000L, 0x0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa1_0(0x60000000000L, 0x0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa1_0(0x400000000000L, 0x24L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa1_0(0x10800000000000L, 0x2000L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa1_0(0x100000000000000L, 0x0L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa1_0(0x2000000000000L, 0xc00000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x701L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa1_0(0x10100000000L, 0x0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa1_0(0x24000000000000L, 0x0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa1_0(0x1000000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 12);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x10000000L, 0x0L);
      case 125:
         return jjStopAtPos(0, 13);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x8000000L) != 0L)
            return jjStopAtPos(1, 27);
         break;
      case 43:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 45:
         if ((active0 & 0x80L) != 0L)
            return jjStopAtPos(1, 7);
         break;
      case 60:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(1, 30);
         break;
      case 61:
         if ((active0 & 0x100L) != 0L)
            return jjStopAtPos(1, 8);
         else if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         else if ((active0 & 0x200000L) != 0L)
            return jjStopAtPos(1, 21);
         else if ((active0 & 0x400000L) != 0L)
            return jjStopAtPos(1, 22);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStopAtPos(1, 25);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 26);
         break;
      case 62:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 31);
         break;
      case 65:
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x121001b000000000L, active1, 0x302800L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x400000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x2000100000000L, active1, 0xc694d1L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000000000L, active1, 0L);
      case 73:
      case 105:
         if ((active1 & 0x100L) != 0L)
         {
            jjmatchedKind = 72;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x4200L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x440300000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x10000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x800000200000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa2_0(active0, 0xc008040c00000000L, active1, 0x80000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x804000000000L, active1, 0x4L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x24000000000000L, active1, 0x8L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x20L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1010a0000000000L, active1, 0L);
      case 124:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(1, 28);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x20300000000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 67:
      case 99:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(2, 67, 4);
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x360080L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x4L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L, active1, 0x4000L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x1000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x500000000000000L, active1, 0L);
      case 74:
      case 106:
         return jjMoveStringLiteralDfa3_0(active0, 0x400000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1008020000000000L, active1, 0x401L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x4001000000000000L, active1, 0x80240L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x800800000000L, active1, 0x20L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x10000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x8080000000000000L, active1, 0x2000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x810008000000000L, active1, 0xc00810L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa3_0(active0, 0x2042083200000000L, active1, 0x8000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000400000000L, active1, 0L);
      case 88:
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active1 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(3, 77, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x4004000000000L, active1, 0L);
      case 66:
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x200000400000000L, active1, 0L);
      case 67:
      case 99:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x1800000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x1000000000L) != 0L)
         {
            jjmatchedKind = 36;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x8c040a200000000L, active1, 0x9445L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x60000L);
      case 75:
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0L, active1, 0x300000L);
      case 76:
      case 108:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(3, 35, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L, active1, 0x80L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa4_0(active0, 0x40000000000L, active1, 0x4000L);
      case 79:
      case 111:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 41, 4);
         else if ((active1 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(3, 73, 4);
         else if ((active1 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(3, 75, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x100a080000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 53, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000000000L, active1, 0x10020L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000000L, active1, 0L);
      case 84:
      case 116:
         if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 4);
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000000L, active1, 0xc80000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000000000L, active1, 0L);
      case 86:
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x300000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000L, active1, 0L);
      case 65:
      case 97:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 40, 4);
         else if ((active1 & 0x20000L) != 0L)
         {
            jjmatchedKind = 81;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0xa100000000000000L, active1, 0xcc0080L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000000000000L, active1, 0x1401L);
      case 69:
      case 101:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 4);
         return jjMoveStringLiteralDfa5_0(active0, 0xb00000000000L, active1, 0L);
      case 71:
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x80000200000000L, active1, 0x60L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x601080000000000L, active1, 0x10000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L, active1, 0L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0L, active1, 0x8004L);
      case 82:
      case 114:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 38, 4);
         return jjMoveStringLiteralDfa5_0(active0, 0x1846000000000000L, active1, 0L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x402000000000L, active1, 0x4000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000000L, active1, 0x300000L);
      case 87:
      case 119:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 95:
         return jjMoveStringLiteralDfa6_0(active0, 0x300000000000L, active1, 0x40000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x2c8000000000000L, active1, 0x64L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x401L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x808000000000L, active1, 0L);
      case 69:
      case 101:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(5, 34, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000200000000L, active1, 0x8000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x4002000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000040000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x10000L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa6_0(active0, 0x402080000000000L, active1, 0L);
      case 79:
      case 111:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0x11000000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x300000L);
      case 82:
      case 114:
         if ((active0 & 0x100000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 56, 4);
         else if ((active1 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 83, 4);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000000000L, active1, 0x4080L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000000000000L, active1, 0x1000L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0xc00000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000000000L, active1, 0x300000L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0xc00008000000000L, active1, 0x4080L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000000000L, active1, 0L);
      case 70:
      case 102:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000000L, active1, 0L);
      case 72:
      case 104:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x40000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000800000000000L, active1, 0x10401L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa7_0(active0, 0x2000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 48, 4);
         break;
      case 79:
      case 111:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(6, 42);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 49, 4);
         else if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 50, 4);
         else if ((active1 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(6, 76, 4);
         break;
      case 80:
      case 112:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000000000L, active1, 0L);
      case 82:
      case 114:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(6, 33, 4);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 51, 4);
         else if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 54, 4);
         else if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 55, 4);
         else if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 57, 4);
         else if ((active1 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(6, 79, 4);
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0xc00064L);
      case 83:
      case 115:
         if ((active0 & 0x1000000000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 60, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x64L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0xc00000L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x200000L);
      case 68:
      case 100:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 4);
         break;
      case 69:
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 37, 4);
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000000000L, active1, 0L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa8_0(active0, 0x800000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000000L, active1, 0x40401L);
      case 82:
      case 114:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 58, 4);
         else if ((active1 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(7, 71, 4);
         else if ((active1 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(7, 80, 4);
         return jjMoveStringLiteralDfa8_0(active0, 0x800180000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active1 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(7, 78, 4);
         break;
      case 84:
      case 116:
         return jjMoveStringLiteralDfa8_0(active0, 0x8000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x100000L);
      case 90:
      case 122:
         return jjMoveStringLiteralDfa8_0(active0, 0x2000000000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa9_0(active0, 0x800000000000000L, active1, 0L);
      case 65:
      case 97:
         return jjMoveStringLiteralDfa9_0(active0, 0x2000000000000000L, active1, 0L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000000L, active1, 0L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa9_0(active0, 0x900000000000L, active1, 0L);
      case 78:
      case 110:
         if ((active0 & 0x8000000000000000L) != 0L)
            return jjStopAtPos(8, 63);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x401L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000000000L, active1, 0x200000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x64L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000000000L, active1, 0xc40000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 32:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0xc00000L);
      case 65:
      case 97:
         if ((active1 & 0x400L) != 0L)
         {
            jjmatchedKind = 74;
            jjmatchedPos = 9;
         }
         else if ((active1 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(9, 82, 4);
         return jjMoveStringLiteralDfa10_0(active0, 0x200000000000L, active1, 0x1L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa10_0(active0, 0x800800000000000L, active1, 0x60L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa10_0(active0, 0x180000000000L, active1, 0x200000L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x4L);
      case 81:
      case 113:
         return jjMoveStringLiteralDfa10_0(active0, 0L, active1, 0x100000L);
      case 82:
      case 114:
         if ((active0 & 0x2000000000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 61, 4);
         break;
      case 83:
      case 115:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(9, 39, 4);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, active1);
      return 10;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         return jjMoveStringLiteralDfa11_0(active0, 0x100000000000L, active1, 0L);
      case 67:
      case 99:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x800000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa11_0(active0, 0x80000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x100000L);
      case 78:
      case 110:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStopAtPos(10, 59);
         return jjMoveStringLiteralDfa11_0(active0, 0xa00000000000L, active1, 0L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x200000L);
      case 82:
      case 114:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(10, 64, 4);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(10, 66);
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x60L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa11_0(active0, 0L, active1, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, active1);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(9, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, active1);
      return 11;
   }
   switch(curChar)
   {
      case 68:
      case 100:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x100000L);
      case 69:
      case 101:
         return jjMoveStringLiteralDfa12_0(active0, 0x200000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x200000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x60L);
      case 78:
      case 110:
         return jjMoveStringLiteralDfa12_0(active0, 0x80000000000L, active1, 0L);
      case 79:
      case 111:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x800000L);
      case 82:
      case 114:
         return jjMoveStringLiteralDfa12_0(active0, 0x100000000000L, active1, 0L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa12_0(active0, 0L, active1, 0x400000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa12_0(active0, 0x800000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(10, active0, active1);
}
private int jjMoveStringLiteralDfa12_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(10, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(11, active0, active1);
      return 12;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 45, 4);
         break;
      case 69:
      case 101:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x200000L);
      case 73:
      case 105:
         return jjMoveStringLiteralDfa13_0(active0, 0x100000000000L, active1, 0x60L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x800000L);
      case 79:
      case 111:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(12, 47, 4);
         break;
      case 81:
      case 113:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x400000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa13_0(active0, 0x80000000000L, active1, 0L);
      case 85:
      case 117:
         return jjMoveStringLiteralDfa13_0(active0, 0L, active1, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(11, active0, active1);
}
private int jjMoveStringLiteralDfa13_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(11, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(12, active0, active1);
      return 13;
   }
   switch(curChar)
   {
      case 65:
      case 97:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(13, 44, 4);
         return jjMoveStringLiteralDfa14_0(active0, 0x80000000000L, active1, 0L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x400000L);
      case 77:
      case 109:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x100000L);
      case 80:
      case 112:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x800000L);
      case 83:
      case 115:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x60L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa14_0(active0, 0L, active1, 0x200000L);
      default :
         break;
   }
   return jjStartNfa_0(12, active0, active1);
}
private int jjMoveStringLiteralDfa14_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(12, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(13, active0, active1);
      return 14;
   }
   switch(curChar)
   {
      case 66:
      case 98:
         return jjMoveStringLiteralDfa15_0(active0, 0x80000000000L, active1, 0L);
      case 68:
      case 100:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x400000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x800000L);
      case 79:
      case 111:
         if ((active1 & 0x200000L) != 0L)
            return jjStopAtPos(14, 85);
         return jjMoveStringLiteralDfa15_0(active0, 0L, active1, 0x60L);
      case 80:
      case 112:
         if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(14, 84);
         break;
      default :
         break;
   }
   return jjStartNfa_0(13, active0, active1);
}
private int jjMoveStringLiteralDfa15_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(13, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(14, active0, active1);
      return 15;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x800000L);
      case 76:
      case 108:
         return jjMoveStringLiteralDfa16_0(active0, 0x80000000000L, active1, 0L);
      case 83:
      case 115:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(15, 69);
         else if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(15, 70);
         break;
      case 85:
      case 117:
         return jjMoveStringLiteralDfa16_0(active0, 0L, active1, 0x400000L);
      default :
         break;
   }
   return jjStartNfa_0(14, active0, active1);
}
private int jjMoveStringLiteralDfa16_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(14, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(15, active0, active1);
      return 16;
   }
   switch(curChar)
   {
      case 69:
      case 101:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(16, 43, 4);
         break;
      case 77:
      case 109:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x400000L);
      case 84:
      case 116:
         return jjMoveStringLiteralDfa17_0(active0, 0L, active1, 0x800000L);
      default :
         break;
   }
   return jjStartNfa_0(15, active0, active1);
}
private int jjMoveStringLiteralDfa17_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(15, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(16, 0L, active1);
      return 17;
   }
   switch(curChar)
   {
      case 79:
      case 111:
         if ((active1 & 0x800000L) != 0L)
            return jjStopAtPos(17, 87);
         break;
      case 80:
      case 112:
         if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(17, 86);
         break;
      default :
         break;
   }
   return jjStartNfa_0(16, 0L, active1);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 20;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 89)
                        kind = 89;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 34)
                     { jjCheckNAddTwoStates(1, 2); }
                  if (curChar == 35)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAdd(9); }
                  }
                  break;
               case 1:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(1, 2); }
                  break;
               case 2:
                  if (curChar == 34 && kind > 88)
                     kind = 88;
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  jjstateSet[jjnewStateCnt++] = 7;
                  break;
               case 8:
                  if (curChar != 35)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(9); }
                  break;
               case 9:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(9); }
                  break;
               case 10:
                  if (curChar == 42)
                     { jjCheckNAddTwoStates(11, 13); }
                  break;
               case 11:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     { jjCheckNAddTwoStates(11, 13); }
                  break;
               case 12:
                  if (curChar == 35 && kind > 99)
                     kind = 99;
                  break;
               case 13:
                  if (curChar == 42)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 35)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 89)
                     kind = 89;
                  { jjCheckNAdd(16); }
                  break;
               case 17:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(17, 18); }
                  break;
               case 18:
                  if (curChar == 46)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L && kind > 91)
                     kind = 91;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 92)
                        kind = 92;
                     { jjCheckNAdd(4); }
                  }
                  else if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 1:
                  { jjAddStates(3, 4); }
                  break;
               case 3:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  { jjCheckNAdd(4); }
                  break;
               case 4:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 92)
                     kind = 92;
                  { jjCheckNAdd(4); }
                  break;
               case 5:
                  if (curChar == 64)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 93)
                     kind = 93;
                  { jjCheckNAdd(7); }
                  break;
               case 9:
                  if (kind > 98)
                     kind = 98;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  { jjAddStates(5, 6); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(3, 4); }
                  break;
               case 9:
                  if ((jjbitVec0[i2] & l2) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(5, 6); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 20 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   16, 17, 18, 1, 2, 11, 13, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", "\53", "\55", "\52", "\57", "\136", "\53\53", "\55\55", "\53\75", 
"\55\75", "\50", "\51", "\173", "\175", "\133", "\135", "\73", "\54", "\72", "\75", 
"\56", "\75\75", "\41\75", "\74", "\76", "\74\75", "\76\75", "\46\46", "\174\174", 
"\41", "\74\74", "\76\76", null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, null, null, null, null, null, null, null, null, null, null, null, null, 
null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }
   image = jjimage;
   image.setLength(0);
   jjimageLen = 0;

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         TokenLexicalActions(matchedToken);
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      case 1 :
        image.append(jjstrLiteralImages[1]);
        lengthOfMatch = jjstrLiteralImages[1].length();
               System.out.println(image);
         break;
      case 2 :
        image.append(jjstrLiteralImages[2]);
        lengthOfMatch = jjstrLiteralImages[2].length();
                  System.out.println(image);
         break;
      case 3 :
        image.append(jjstrLiteralImages[3]);
        lengthOfMatch = jjstrLiteralImages[3].length();
                System.out.println(image);
         break;
      case 4 :
        image.append(jjstrLiteralImages[4]);
        lengthOfMatch = jjstrLiteralImages[4].length();
                     System.out.println(image);
         break;
      case 5 :
        image.append(jjstrLiteralImages[5]);
        lengthOfMatch = jjstrLiteralImages[5].length();
                     System.out.println(image);
         break;
      case 6 :
        image.append(jjstrLiteralImages[6]);
        lengthOfMatch = jjstrLiteralImages[6].length();
                     System.out.println(image);
         break;
      case 7 :
        image.append(jjstrLiteralImages[7]);
        lengthOfMatch = jjstrLiteralImages[7].length();
                        System.out.println(image);
         break;
      case 8 :
        image.append(jjstrLiteralImages[8]);
        lengthOfMatch = jjstrLiteralImages[8].length();
                              System.out.println(image);
         break;
      case 9 :
        image.append(jjstrLiteralImages[9]);
        lengthOfMatch = jjstrLiteralImages[9].length();
                               System.out.println(image);
         break;
      case 10 :
        image.append(jjstrLiteralImages[10]);
        lengthOfMatch = jjstrLiteralImages[10].length();
                  System.out.println(image);
         break;
      case 11 :
        image.append(jjstrLiteralImages[11]);
        lengthOfMatch = jjstrLiteralImages[11].length();
                   System.out.println(image);
         break;
      case 12 :
        image.append(jjstrLiteralImages[12]);
        lengthOfMatch = jjstrLiteralImages[12].length();
                     System.out.println(image);
         break;
      case 13 :
        image.append(jjstrLiteralImages[13]);
        lengthOfMatch = jjstrLiteralImages[13].length();
                     System.out.println(image);
         break;
      case 14 :
        image.append(jjstrLiteralImages[14]);
        lengthOfMatch = jjstrLiteralImages[14].length();
                   System.out.println(image);
         break;
      case 15 :
        image.append(jjstrLiteralImages[15]);
        lengthOfMatch = jjstrLiteralImages[15].length();
                   System.out.println(image);
         break;
      case 16 :
        image.append(jjstrLiteralImages[16]);
        lengthOfMatch = jjstrLiteralImages[16].length();
                 System.out.println(image);
         break;
      case 17 :
        image.append(jjstrLiteralImages[17]);
        lengthOfMatch = jjstrLiteralImages[17].length();
                System.out.println(image);
         break;
      case 18 :
        image.append(jjstrLiteralImages[18]);
        lengthOfMatch = jjstrLiteralImages[18].length();
                System.out.println(image);
         break;
      case 19 :
        image.append(jjstrLiteralImages[19]);
        lengthOfMatch = jjstrLiteralImages[19].length();
                 System.out.println(image);
         break;
      case 20 :
        image.append(jjstrLiteralImages[20]);
        lengthOfMatch = jjstrLiteralImages[20].length();
                 System.out.println(image);
         break;
      case 21 :
        image.append(jjstrLiteralImages[21]);
        lengthOfMatch = jjstrLiteralImages[21].length();
                       System.out.println(image);
         break;
      case 22 :
        image.append(jjstrLiteralImages[22]);
        lengthOfMatch = jjstrLiteralImages[22].length();
                            System.out.println(image);
         break;
      case 23 :
        image.append(jjstrLiteralImages[23]);
        lengthOfMatch = jjstrLiteralImages[23].length();
                  System.out.println(image);
         break;
      case 24 :
        image.append(jjstrLiteralImages[24]);
        lengthOfMatch = jjstrLiteralImages[24].length();
                  System.out.println(image);
         break;
      case 25 :
        image.append(jjstrLiteralImages[25]);
        lengthOfMatch = jjstrLiteralImages[25].length();
                        System.out.println(image);
         break;
      case 26 :
        image.append(jjstrLiteralImages[26]);
        lengthOfMatch = jjstrLiteralImages[26].length();
                        System.out.println(image);
         break;
      case 27 :
        image.append(jjstrLiteralImages[27]);
        lengthOfMatch = jjstrLiteralImages[27].length();
                 System.out.println(image);
         break;
      case 28 :
        image.append(jjstrLiteralImages[28]);
        lengthOfMatch = jjstrLiteralImages[28].length();
                System.out.println(image);
         break;
      case 29 :
        image.append(jjstrLiteralImages[29]);
        lengthOfMatch = jjstrLiteralImages[29].length();
                System.out.println(image);
         break;
      case 30 :
        image.append(jjstrLiteralImages[30]);
        lengthOfMatch = jjstrLiteralImages[30].length();
                     System.out.println(image);
         break;
      case 31 :
        image.append(jjstrLiteralImages[31]);
        lengthOfMatch = jjstrLiteralImages[31].length();
                     System.out.println(image);
         break;
      case 32 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println(image);
         break;
      case 33 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                             System.out.println(image);
         break;
      case 34 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                           System.out.println(image);
         break;
      case 35 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println(image);
         break;
      case 36 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                       System.out.println(image);
         break;
      case 37 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               System.out.println(image);
         break;
      case 38 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                         System.out.println(image);
         break;
      case 39 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    System.out.println(image);
         break;
      case 40 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println(image);
         break;
      case 41 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println(image);
         break;
      case 42 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println(image);
         break;
      case 43 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                 System.out.println(image);
         break;
      case 44 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                            System.out.println(image);
         break;
      case 45 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                          System.out.println(image);
         break;
      case 46 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println(image);
         break;
      case 47 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                          System.out.println(image);
         break;
      case 48 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println(image);
         break;
      case 49 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println(image);
         break;
      case 50 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println(image);
         break;
      case 51 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println(image);
         break;
      case 52 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                System.out.println(image);
         break;
      case 53 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println(image);
         break;
      case 54 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println(image);
         break;
      case 55 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println(image);
         break;
      case 56 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println(image);
         break;
      case 57 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println(image);
         break;
      case 58 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                System.out.println(image);
         break;
      case 59 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                   System.out.println(image);
         break;
      case 60 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println(image);
         break;
      case 61 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                    System.out.println(image);
         break;
      case 62 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println(image);
         break;
      case 63 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                               System.out.println(image);
         break;
      case 64 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                      System.out.println(image);
         break;
      case 65 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println(image);
         break;
      case 66 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  System.out.println(image);
         break;
      case 67 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println(image);
         break;
      case 68 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                        System.out.println(image);
         break;
      case 69 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                       System.out.println(image);
         break;
      case 70 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                       System.out.println(image);
         break;
      case 71 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  System.out.println(image);
         break;
      case 72 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                      System.out.println(image);
         break;
      case 73 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println(image);
         break;
      case 74 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                      System.out.println(image);
         break;
      case 75 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println(image);
         break;
      case 76 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                System.out.println(image);
         break;
      case 77 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                          System.out.println(image);
         break;
      case 78 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  System.out.println(image);
         break;
      case 79 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                System.out.println(image);
         break;
      case 80 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  System.out.println(image);
         break;
      case 81 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                            System.out.println(image);
         break;
      case 82 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                      System.out.println(image);
         break;
      case 83 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println(image);
         break;
      case 84 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                            System.out.println(image);
         break;
      case 85 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                System.out.println(image);
         break;
      case 86 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                  System.out.println(image);
         break;
      case 87 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                      System.out.println(image);
         break;
      case 88 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                  System.out.println(image);
         break;
      case 89 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                              System.out.println(image);
         break;
      case 91 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                              System.out.println(image);
         break;
      case 92 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                System.out.println(image);
         break;
      case 93 :
        image.append(input_stream.GetSuffix(jjimageLen + (lengthOfMatch = jjmatchedPos + 1)));
                                                                         System.out.println(image);
         break;
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public analizadorTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public analizadorTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 20; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffffL, 0x3bffffffL, 
};
static final long[] jjtoSkip = {
   0x0L, 0xfc0000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0xc00000000L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[20];
    private final int[] jjstateSet = new int[2 * 20];

    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    
    protected char curChar;
}
