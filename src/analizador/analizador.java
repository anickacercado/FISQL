/* analizador.java */
/* Generated By:JavaCC: Do not edit this line. analizador.java */
package analizador;

public class analizador implements analizadorConstants {
  public static void main(String args[]) throws ParseException {
    analizador parser = new analizador(System.in);
    parser.S();
    System.out.println("Exito!!");
  }

  final public void S() throws ParseException {
    LISTA_SENTENCIA_GLOBAL();
  }

  final public void LISTA_SENTENCIA_GLOBAL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_CREAR:{
      CREAR();
      break;
      }
    case TOKEN_USAR:{
      USAR_BD();
      break;
      }
    case TOKEN_ALTERAR:{
      ALTERAR();
      break;
      }
    case TOKEN_ELIMINAR:{
      ELIMINAR();
      break;
      }
    case TOKEN_INSERTAR:{
      INSERTAR();
      break;
      }
    case TOKEN_ACTUALIZAR:{
      ACTUALIZAR();
      break;
      }
    case TOKEN_BORRAR:{
      BORRAR();
      break;
      }
    case TOKEN_SELECCIONAR:{
      SELECCIONAR();
      jj_consume_token(PYCOMA);
      break;
      }
    case TOKEN_OTORGAR:{
      OTORGAR();
      break;
      }
    case TOKEN_DENEGAR:{
      DENEGAR();
      break;
      }
    case TOKEN_DECLARAR:{
      DECLARAR();
      break;
      }
    case TOKEN_BACKUP_USQL:
    case TOKEN_BACKUP_COMPLETO:{
      BACKUP();
      break;
      }
    case TOKEN_RESTAURAR_USQL:
    case TOKEN_RESTAURAR_COMPLETO:{
      RESTAURAR();
      break;
      }
    case TOKEN_IMPRIMIR:
    case ID:{
      LLAMADA_METODO_FUNCION();
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_CREAR:
    case TOKEN_USAR:
    case TOKEN_ALTERAR:
    case TOKEN_ELIMINAR:
    case TOKEN_INSERTAR:
    case TOKEN_ACTUALIZAR:
    case TOKEN_BORRAR:
    case TOKEN_SELECCIONAR:
    case TOKEN_OTORGAR:
    case TOKEN_DENEGAR:
    case TOKEN_DECLARAR:
    case TOKEN_IMPRIMIR:
    case TOKEN_BACKUP_USQL:
    case TOKEN_BACKUP_COMPLETO:
    case TOKEN_RESTAURAR_USQL:
    case TOKEN_RESTAURAR_COMPLETO:
    case ID:{
      LISTA_SENTENCIA_GLOBAL();
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
  }

  final public void LISTA_SENTENCIA_LOCAL() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_RETORNO:{
      RETORNO();
      break;
      }
    case TOKEN_INSERTAR:{
      INSERTAR();
      break;
      }
    case TOKEN_ACTUALIZAR:{
      ACTUALIZAR();
      break;
      }
    case TOKEN_BORRAR:{
      BORRAR();
      break;
      }
    case TOKEN_SELECCIONAR:{
      SELECCIONAR();
      jj_consume_token(PYCOMA);
      break;
      }
    case TOKEN_DECLARAR:{
      DECLARAR();
      break;
      }
    case VARIABLE:{
      ASIGNAR();
      break;
      }
    case TOKEN_SI:{
      SI();
      break;
      }
    case TOKEN_SELECCIONA:{
      SELECCIONA();
      break;
      }
    case TOKEN_PARA:{
      PARA();
      break;
      }
    case TOKEN_MIENTRAS:{
      MIENTRAS();
      break;
      }
    case TOKEN_DETENER:{
      DETENER();
      break;
      }
    case TOKEN_IMPRIMIR:
    case ID:{
      LLAMADA_METODO_FUNCION();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_RETORNO:
    case TOKEN_INSERTAR:
    case TOKEN_ACTUALIZAR:
    case TOKEN_BORRAR:
    case TOKEN_SELECCIONAR:
    case TOKEN_DECLARAR:
    case TOKEN_SI:
    case TOKEN_SELECCIONA:
    case TOKEN_PARA:
    case TOKEN_MIENTRAS:
    case TOKEN_DETENER:
    case TOKEN_IMPRIMIR:
    case ID:
    case VARIABLE:{
      LISTA_SENTENCIA_LOCAL();
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      ;
    }
  }

  final public void CREAR() throws ParseException {
    jj_consume_token(TOKEN_CREAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_BASE_DATOS:{
      CREAR_BD();
      break;
      }
    case TOKEN_TABLA:{
      CREAR_TABLA();
      break;
      }
    case TOKEN_OBJETO:{
      CREAR_OBJETO();
      break;
      }
    case TOKEN_FUNCION:{
      CREAR_FUNCION();
      break;
      }
    case TOKEN_PROCEDIMIENTO:{
      CREAR_PROCEDIMIENTO();
      break;
      }
    case TOKEN_USUARIO:{
      CREAR_USUARIO();
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CREAR_BD() throws ParseException {
    jj_consume_token(TOKEN_BASE_DATOS);
    jj_consume_token(ID);
    jj_consume_token(PYCOMA);
  }

  final public void CREAR_TABLA() throws ParseException {
    jj_consume_token(TOKEN_TABLA);
    jj_consume_token(ID);
    jj_consume_token(PAR_ABRE);
    LISTA_PARAMETRO_TABLA();
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(PYCOMA);
  }

  final public void LISTA_PARAMETRO_TABLA() throws ParseException {
    PARAMETRO_TABLA();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      LISTA_PARAMETRO_TABLA();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
  }

  final public void PARAMETRO_TABLA() throws ParseException {
    TIPO_DATO();
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_NULO:
    case TOKEN_NO_NULO:
    case TOKEN_AUTOINCREMETABLE:
    case TOKEN_LLAVE_PRIMARIA:
    case TOKEN_LLAVE_FORANEA:{
      LISTA_COMPLEMENTO_PARAMETRO_TABLA();
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
  }

  final public void LISTA_COMPLEMENTO_PARAMETRO_TABLA() throws ParseException {
    COMPLEMENTO_PARAMETRO_TABLA();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_NULO:
    case TOKEN_NO_NULO:
    case TOKEN_AUTOINCREMETABLE:
    case TOKEN_LLAVE_PRIMARIA:
    case TOKEN_LLAVE_FORANEA:{
      LISTA_COMPLEMENTO_PARAMETRO_TABLA();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      ;
    }
  }

  final public void COMPLEMENTO_PARAMETRO_TABLA() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_NULO:{
      jj_consume_token(TOKEN_NULO);
      break;
      }
    case TOKEN_NO_NULO:{
      jj_consume_token(TOKEN_NO_NULO);
      break;
      }
    case TOKEN_AUTOINCREMETABLE:{
      jj_consume_token(TOKEN_AUTOINCREMETABLE);
      break;
      }
    case TOKEN_LLAVE_PRIMARIA:{
      jj_consume_token(TOKEN_LLAVE_PRIMARIA);
      break;
      }
    case TOKEN_LLAVE_FORANEA:{
      jj_consume_token(TOKEN_LLAVE_FORANEA);
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void TIPO_DATO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TEXT:{
      jj_consume_token(TOKEN_TEXT);
      break;
      }
    case TOKEN_INTEGER:{
      jj_consume_token(TOKEN_INTEGER);
      break;
      }
    case TOKEN_DOUBLE:{
      jj_consume_token(TOKEN_DOUBLE);
      break;
      }
    case TOKEN_BOOL:{
      jj_consume_token(TOKEN_BOOL);
      break;
      }
    case TOKEN_DATE:{
      jj_consume_token(TOKEN_DATE);
      break;
      }
    case TOKEN_DATETIME:{
      jj_consume_token(TOKEN_DATETIME);
      break;
      }
    case ID:{
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void CREAR_OBJETO() throws ParseException {
    jj_consume_token(TOKEN_OBJETO);
    jj_consume_token(ID);
    jj_consume_token(PAR_ABRE);
    LISTA_PARAMETRO();
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(PYCOMA);
  }

  final public void LISTA_PARAMETRO() throws ParseException {
    TIPO_DATO();
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      LISTA_PARAMETRO();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
  }

  final public void CREAR_FUNCION() throws ParseException {
    jj_consume_token(TOKEN_FUNCION);
    jj_consume_token(ID);
    jj_consume_token(PAR_ABRE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TEXT:
    case TOKEN_INTEGER:
    case TOKEN_DOUBLE:
    case TOKEN_BOOL:
    case TOKEN_DATE:
    case TOKEN_DATETIME:
    case ID:{
      LISTA_PARAMETRO_PROC_FUN();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(PAR_CIERRA);
    TIPO_DATO();
    jj_consume_token(LLAVE_ABRE);
    LISTA_SENTENCIA_LOCAL();
    jj_consume_token(LLAVE_CIERRA);
  }

  final public void LISTA_PARAMETRO_PROC_FUN() throws ParseException {
    TIPO_DATO();
    jj_consume_token(VARIABLE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      LISTA_PARAMETRO_PROC_FUN();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  final public void CREAR_PROCEDIMIENTO() throws ParseException {
    jj_consume_token(TOKEN_PROCEDIMIENTO);
    jj_consume_token(ID);
    jj_consume_token(PAR_ABRE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TEXT:
    case TOKEN_INTEGER:
    case TOKEN_DOUBLE:
    case TOKEN_BOOL:
    case TOKEN_DATE:
    case TOKEN_DATETIME:
    case ID:{
      LISTA_PARAMETRO_PROC_FUN();
      break;
      }
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(LLAVE_ABRE);
    LISTA_SENTENCIA_LOCAL();
    jj_consume_token(LLAVE_CIERRA);
  }

  final public void CREAR_USUARIO() throws ParseException {
    jj_consume_token(TOKEN_USUARIO);
    jj_consume_token(ID);
    jj_consume_token(TOKEN_COLOCAR);
    jj_consume_token(TOKEN_PASSWORD);
    jj_consume_token(IGUAL);
    jj_consume_token(CADENA);
    jj_consume_token(PYCOMA);
  }

  final public void RETORNO() throws ParseException {
    jj_consume_token(TOKEN_RETORNO);
    CONDICION();
    jj_consume_token(PYCOMA);
  }

  final public void LISTA_COND() throws ParseException {
    CONDICION();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      LISTA_COND();
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      ;
    }
  }

  final public void USAR_BD() throws ParseException {
    jj_consume_token(TOKEN_USAR);
    jj_consume_token(ID);
    jj_consume_token(PYCOMA);
  }

  final public void ALTERAR() throws ParseException {
    jj_consume_token(TOKEN_ALTERAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TABLA:{
      ALTERAR_TABLA();
      break;
      }
    case TOKEN_OBJETO:{
      ALTERAR_OBJETO();
      break;
      }
    case TOKEN_USUARIO:{
      ALTERAR_USUARIO();
      break;
      }
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LISTA_ID() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      LISTA_ID();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      ;
    }
  }

  final public void ALTERAR_TABLA() throws ParseException {
    jj_consume_token(TOKEN_TABLA);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_AGREGAR:{
      jj_consume_token(TOKEN_AGREGAR);
      jj_consume_token(PAR_ABRE);
      LISTA_PARAMETRO_TABLA();
      jj_consume_token(PAR_CIERRA);
      break;
      }
    case TOKEN_QUITAR:{
      jj_consume_token(TOKEN_QUITAR);
      LISTA_ID();
      break;
      }
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PYCOMA);
  }

  final public void ALTERAR_OBJETO() throws ParseException {
    jj_consume_token(TOKEN_OBJETO);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_AGREGAR:{
      jj_consume_token(TOKEN_AGREGAR);
      jj_consume_token(PAR_ABRE);
      LISTA_PARAMETRO();
      jj_consume_token(PAR_CIERRA);
      break;
      }
    case TOKEN_QUITAR:{
      jj_consume_token(TOKEN_QUITAR);
      LISTA_ID();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PYCOMA);
  }

  final public void ALTERAR_USUARIO() throws ParseException {
    jj_consume_token(TOKEN_USUARIO);
    jj_consume_token(ID);
    jj_consume_token(TOKEN_CAMBIAR);
    jj_consume_token(TOKEN_PASSWORD);
    jj_consume_token(IGUAL);
    jj_consume_token(CADENA);
    jj_consume_token(PYCOMA);
  }

  final public void ELIMINAR() throws ParseException {
    jj_consume_token(TOKEN_ELIMINAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TABLA:{
      jj_consume_token(TOKEN_TABLA);
      break;
      }
    case TOKEN_BASE_DATOS:{
      jj_consume_token(TOKEN_BASE_DATOS);
      break;
      }
    case TOKEN_OBJETO:{
      jj_consume_token(TOKEN_OBJETO);
      break;
      }
    case TOKEN_USUARIO:{
      jj_consume_token(TOKEN_USUARIO);
      break;
      }
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ID);
    jj_consume_token(PYCOMA);
  }

  final public void INSERTAR() throws ParseException {
    jj_consume_token(TOKEN_INSERTAR);
    jj_consume_token(TOKEN_TABLA);
    jj_consume_token(ID);
    jj_consume_token(PAR_ABRE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      LISTA_ID();
      jj_consume_token(PAR_CIERRA);
      jj_consume_token(TOKEN_VALORES);
      jj_consume_token(PAR_ABRE);
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      ;
    }
    LISTA_COND();
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(PYCOMA);
  }

  final public void ACTUALIZAR() throws ParseException {
    jj_consume_token(TOKEN_ACTUALIZAR);
    jj_consume_token(TOKEN_TABLA);
    jj_consume_token(ID);
    jj_consume_token(PAR_ABRE);
    LISTA_ID();
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(TOKEN_VALORES);
    jj_consume_token(PAR_ABRE);
    LISTA_COND();
    jj_consume_token(PAR_CIERRA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_DONDE:{
      jj_consume_token(TOKEN_DONDE);
      CONDICION();
      break;
      }
    default:
      jj_la1[21] = jj_gen;
      ;
    }
    jj_consume_token(PYCOMA);
  }

  final public void BORRAR() throws ParseException {
    jj_consume_token(TOKEN_BORRAR);
    jj_consume_token(TOKEN_TABLA);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_DONDE:{
      jj_consume_token(TOKEN_DONDE);
      CONDICION();
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      ;
    }
    jj_consume_token(PYCOMA);
  }

  final public void SELECCIONAR() throws ParseException {
    jj_consume_token(TOKEN_SELECCIONAR);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      LISTA_ID();
      break;
      }
    case POR:{
      jj_consume_token(POR);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(TOKEN_DE);
    LISTA_ID();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_DONDE:{
      jj_consume_token(TOKEN_DONDE);
      CONDICION();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_ORDENAR:{
      jj_consume_token(TOKEN_ORDENAR);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case TOKEN_ASC:{
        jj_consume_token(TOKEN_ASC);
        break;
        }
      case TOKEN_DESC:{
        jj_consume_token(TOKEN_DESC);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  final public void OTORGAR() throws ParseException {
    jj_consume_token(TOKEN_OTORGAR);
    LISTA_ID();
    jj_consume_token(ID);
    jj_consume_token(PUNTO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POR:{
      jj_consume_token(POR);
      break;
      }
    case ID:{
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PYCOMA);
  }

  final public void DENEGAR() throws ParseException {
    jj_consume_token(TOKEN_DENEGAR);
    LISTA_ID();
    jj_consume_token(ID);
    jj_consume_token(PUNTO);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POR:{
      jj_consume_token(POR);
      break;
      }
    case ID:{
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PYCOMA);
  }

  final public void DECLARAR() throws ParseException {
    jj_consume_token(TOKEN_DECLARAR);
    LISTA_VARIABLE();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TEXT:
    case TOKEN_INTEGER:
    case TOKEN_DOUBLE:
    case TOKEN_BOOL:
    case TOKEN_DATE:
    case TOKEN_DATETIME:{
      TIPO_DATO_DECLARAR();
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:{
        jj_consume_token(IGUAL);
        CONDICION();
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        ;
      }
      break;
      }
    case ID:{
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PYCOMA);
  }

  final public void LISTA_VARIABLE() throws ParseException {
    jj_consume_token(VARIABLE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case COMA:{
      jj_consume_token(COMA);
      LISTA_VARIABLE();
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      ;
    }
  }

  final public void TIPO_DATO_DECLARAR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_TEXT:{
      jj_consume_token(TOKEN_TEXT);
      break;
      }
    case TOKEN_INTEGER:{
      jj_consume_token(TOKEN_INTEGER);
      break;
      }
    case TOKEN_DOUBLE:{
      jj_consume_token(TOKEN_DOUBLE);
      break;
      }
    case TOKEN_BOOL:{
      jj_consume_token(TOKEN_BOOL);
      break;
      }
    case TOKEN_DATE:{
      jj_consume_token(TOKEN_DATE);
      break;
      }
    case TOKEN_DATETIME:{
      jj_consume_token(TOKEN_DATETIME);
      break;
      }
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void ASIGNAR() throws ParseException {
    jj_consume_token(VARIABLE);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PUNTO:{
      jj_consume_token(PUNTO);
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[33] = jj_gen;
      ;
    }
    jj_consume_token(IGUAL);
    CONDICION();
    jj_consume_token(PYCOMA);
  }

  final public void SI() throws ParseException {
    jj_consume_token(TOKEN_SI);
    jj_consume_token(PAR_ABRE);
    CONDICION();
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(LLAVE_ABRE);
    LISTA_SENTENCIA_LOCAL();
    jj_consume_token(LLAVE_CIERRA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_SINO:{
      jj_consume_token(TOKEN_SINO);
      jj_consume_token(LLAVE_ABRE);
      LISTA_SENTENCIA_LOCAL();
      jj_consume_token(LLAVE_CIERRA);
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      ;
    }
  }

  final public void SELECCIONA() throws ParseException {
    jj_consume_token(TOKEN_SELECCIONA);
    jj_consume_token(PAR_ABRE);
    CONDICION();
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(LLAVE_ABRE);
    LISTA_CASO();
    jj_consume_token(LLAVE_CIERRA);
  }

  final public void LISTA_CASO() throws ParseException {
    jj_consume_token(TOKEN_CASO);
    VALOR_CASO();
    jj_consume_token(DOSPUNTOS);
    LISTA_SENTENCIA_LOCAL();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_CASO:{
      LISTA_CASO();
      break;
      }
    default:
      jj_la1[35] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_DEFECTO:{
      DEFECTO();
      break;
      }
    default:
      jj_la1[36] = jj_gen;
      ;
    }
  }

  final public void VALOR_CASO() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CADENA:{
      jj_consume_token(CADENA);
      break;
      }
    case ENTERO:{
      jj_consume_token(ENTERO);
      break;
      }
    case DECIMAL:{
      jj_consume_token(DECIMAL);
      break;
      }
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void DEFECTO() throws ParseException {
    jj_consume_token(TOKEN_DEFECTO);
    jj_consume_token(DOSPUNTOS);
    LISTA_SENTENCIA_LOCAL();
  }

  final public void PARA() throws ParseException {
    jj_consume_token(TOKEN_PARA);
    jj_consume_token(PAR_ABRE);
    jj_consume_token(TOKEN_DECLARAR);
    jj_consume_token(VARIABLE);
    jj_consume_token(TOKEN_INTEGER);
    jj_consume_token(IGUAL);
    CONDICION();
    jj_consume_token(PYCOMA);
    CONDICION();
    jj_consume_token(PYCOMA);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AUMENTO:{
      jj_consume_token(AUMENTO);
      break;
      }
    case DECREMENTO:{
      jj_consume_token(DECREMENTO);
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(LLAVE_ABRE);
    LISTA_SENTENCIA_LOCAL();
    jj_consume_token(LLAVE_CIERRA);
  }

  final public void MIENTRAS() throws ParseException {
    jj_consume_token(TOKEN_MIENTRAS);
    jj_consume_token(PAR_ABRE);
    CONDICION();
    jj_consume_token(PAR_CIERRA);
    jj_consume_token(LLAVE_ABRE);
    LISTA_SENTENCIA_LOCAL();
    jj_consume_token(LLAVE_CIERRA);
  }

  final public void DETENER() throws ParseException {
    jj_consume_token(TOKEN_DETENER);
    jj_consume_token(PYCOMA);
  }

  final public void FUNCIONES_PROPIAS_DEL_LENGUAJE() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_FECHA:{
      jj_consume_token(TOKEN_FECHA);
      jj_consume_token(PAR_ABRE);
      jj_consume_token(PAR_CIERRA);
      break;
      }
    case TOKEN_FECHA_HORA:{
      jj_consume_token(TOKEN_FECHA_HORA);
      jj_consume_token(PAR_ABRE);
      jj_consume_token(PAR_CIERRA);
      break;
      }
    case TOKEN_CONTAR:{
      jj_consume_token(TOKEN_CONTAR);
      jj_consume_token(PAR_ABRE);
      jj_consume_token(MENOR_2);
      SELECCIONAR();
      jj_consume_token(MAYOR_2);
      jj_consume_token(PAR_CIERRA);
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void BACKUP() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_BACKUP_USQL:{
      jj_consume_token(TOKEN_BACKUP_USQL);
      break;
      }
    case TOKEN_BACKUP_COMPLETO:{
      jj_consume_token(TOKEN_BACKUP_COMPLETO);
      break;
      }
    default:
      jj_la1[40] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(ID);
    jj_consume_token(ID);
    jj_consume_token(PYCOMA);
  }

  final public void RESTAURAR() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case TOKEN_RESTAURAR_USQL:{
      jj_consume_token(TOKEN_RESTAURAR_USQL);
      break;
      }
    case TOKEN_RESTAURAR_COMPLETO:{
      jj_consume_token(TOKEN_RESTAURAR_COMPLETO);
      break;
      }
    default:
      jj_la1[41] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(CADENA);
    jj_consume_token(PYCOMA);
  }

  final public void CONDICION() throws ParseException {
    COND_AND();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case OR:{
      jj_consume_token(OR);
      CONDICION();
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      ;
    }
  }

  final public void COND_AND() throws ParseException {
    COND_NOT();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case AND:{
      jj_consume_token(AND);
      COND_AND();
      break;
      }
    default:
      jj_la1[43] = jj_gen;
      ;
    }
  }

  final public void COND_NOT() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NOT:{
      jj_consume_token(NOT);
      break;
      }
    default:
      jj_la1[44] = jj_gen;
      ;
    }
    REL();
  }

  final public void REL() throws ParseException {
    EXP();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUALACION:
    case DIFERENTE:
    case MENOR:
    case MAYOR:
    case MENORIGUAL:
    case MAYORIGUAL:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUALACION:{
        jj_consume_token(IGUALACION);
        break;
        }
      case DIFERENTE:{
        jj_consume_token(DIFERENTE);
        break;
        }
      case MAYOR:{
        jj_consume_token(MAYOR);
        break;
        }
      case MENOR:{
        jj_consume_token(MENOR);
        break;
        }
      case MAYORIGUAL:{
        jj_consume_token(MAYORIGUAL);
        break;
        }
      case MENORIGUAL:{
        jj_consume_token(MENORIGUAL);
        break;
        }
      default:
        jj_la1[45] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      REL();
      break;
      }
    default:
      jj_la1[46] = jj_gen;
      ;
    }
  }

  final public void EXP() throws ParseException {
    F();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAS:
    case MENOS:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MAS:{
        jj_consume_token(MAS);
        break;
        }
      case MENOS:{
        jj_consume_token(MENOS);
        break;
        }
      default:
        jj_la1[47] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      EXP();
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      ;
    }
  }

  final public void F() throws ParseException {
    E();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POR:
    case DIVISION:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case POR:{
        jj_consume_token(POR);
        break;
        }
      case DIVISION:{
        jj_consume_token(DIVISION);
        break;
        }
      default:
        jj_la1[49] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      F();
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      ;
    }
  }

  final public void E() throws ParseException {
    H();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case POTENCIA:{
      jj_consume_token(POTENCIA);
      E();
      break;
      }
    default:
      jj_la1[51] = jj_gen;
      ;
    }
  }

  final public void H() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VARIABLE:{
      jj_consume_token(VARIABLE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PUNTO:{
        jj_consume_token(PUNTO);
        jj_consume_token(ID);
        break;
        }
      default:
        jj_la1[52] = jj_gen;
        ;
      }
      break;
      }
    case ID:{
      LLAMADA_METODO_OBJETO();
      break;
      }
    case TOKEN_FECHA:
    case TOKEN_FECHA_HORA:
    case TOKEN_CONTAR:{
      FUNCIONES_PROPIAS_DEL_LENGUAJE();
      break;
      }
    case ENTERO:{
      jj_consume_token(ENTERO);
      break;
      }
    case CADENA:{
      jj_consume_token(CADENA);
      break;
      }
    case DECIMAL:{
      jj_consume_token(DECIMAL);
      break;
      }
    default:
      jj_la1[53] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void LLAMADA_METODO_OBJETO() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PAR_ABRE:
    case PUNTO:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case PAR_ABRE:{
        jj_consume_token(PAR_ABRE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NOT:
        case TOKEN_FECHA:
        case TOKEN_FECHA_HORA:
        case TOKEN_CONTAR:
        case CADENA:
        case ENTERO:
        case DECIMAL:
        case ID:
        case VARIABLE:{
          LISTA_COND();
          break;
          }
        default:
          jj_la1[54] = jj_gen;
          ;
        }
        jj_consume_token(PAR_CIERRA);
        break;
        }
      case PUNTO:{
        jj_consume_token(PUNTO);
        jj_consume_token(ID);
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      ;
    }
  }

  final public void LLAMADA_METODO_FUNCION() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      jj_consume_token(PAR_ABRE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case TOKEN_FECHA:
      case TOKEN_FECHA_HORA:
      case TOKEN_CONTAR:
      case CADENA:
      case ENTERO:
      case DECIMAL:
      case ID:
      case VARIABLE:{
        LISTA_COND();
        break;
        }
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      jj_consume_token(PAR_CIERRA);
      jj_consume_token(PYCOMA);
      break;
      }
    case TOKEN_IMPRIMIR:{
      jj_consume_token(TOKEN_IMPRIMIR);
      jj_consume_token(PAR_ABRE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NOT:
      case TOKEN_FECHA:
      case TOKEN_FECHA_HORA:
      case TOKEN_CONTAR:
      case CADENA:
      case ENTERO:
      case DECIMAL:
      case ID:
      case VARIABLE:{
        CONDICION();
        break;
        }
      default:
        jj_la1[58] = jj_gen;
        ;
      }
      jj_consume_token(PAR_CIERRA);
      jj_consume_token(PYCOMA);
      break;
      }
    default:
      jj_la1[59] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  /** Generated Token Manager. */
  public analizadorTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[60];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000000,0x10000000,0x0,0x0,0x60000000,0x40,0x80000000,0x80000000,0x80000000,0x0,0x40,0x0,0x40,0x0,0x40,0x40000000,0x40,0x0,0x0,0x60000000,0x0,0x0,0x0,0x1000,0x0,0x0,0x0,0x1000,0x1000,0x100,0x0,0x40,0x0,0x200,0x0,0x0,0x0,0x0,0x18000,0x0,0x0,0x0,0x1000000,0x800000,0x2000000,0x7e0000,0x7e0000,0xc00,0xc00,0x3000,0x3000,0x4000,0x200,0x0,0x2000000,0x202,0x202,0x2000000,0x2000000,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x386b1800,0x386b1800,0x606a0080,0x606a0080,0x170,0x0,0xf,0xf,0xf,0x0,0x0,0x0,0x0,0x0,0x0,0x110,0x0,0x6000,0x6000,0x110,0x0,0x100000,0x100000,0x0,0x100000,0x6000000,0x1000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x80000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x1003c40,0x1003c40,0x3000079,0x3000079,0x0,0x0,0x0,0x0,0x0,0x10fc000,0x0,0x10fc000,0x0,0x10fc000,0x0,0x0,0x0,0x0,0x0,0x0,0x1000000,0x0,0x0,0x1000000,0x0,0x0,0x0,0x1000000,0x1000000,0x0,0x10fc000,0x0,0xfc000,0x0,0x0,0x2,0x4,0xb00000,0x0,0x380,0xc00,0x3000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x3b00380,0x3b00380,0x0,0x0,0x3b00380,0x3b00380,0x1000040,};
   }

  /** Constructor with InputStream. */
  public analizador(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public analizador(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new analizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public analizador(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new analizadorTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public analizador(analizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(analizadorTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 60; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[96];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 60; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 96; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
