options {
IGNORE_CASE = true;
STATIC = false;
    /*OUTPUTOKEN_DIRECTORY="C://Users//anick//Documents//NetBeansProjects//[Compi2]Proyecto1_201212859//src//analizador//"*/;
    OUTPUTOKEN_DIRECTORY="C://Users//3plgtanickacf//Documents//GitHub//FISQL//src//analizador//";
}

PARSER_BEGIN(analizador)
package analizador;

public class analizador {
  public static void main(String args[]) throws ParseException {
    analizador parser = new analizador(System.in);
    parser.S();
    System.out.println("Exito!!");
  }
}
PARSER_END(analizador)

TOKEN:
{   
    <PAR_ABRE:"(">{System.out.println(image);}
    |<PAR_CIERRA:")">{System.out.println(image);}
    |<LLAVE_ABRE:"{">{System.out.println(image);}
    |<LLAVE_CIERRA:"}">{System.out.println(image);}
    |<PYCOMA:";">{System.out.println(image);}
    |<COMA:",">{System.out.println(image);}
    |<DOSPUNTOS:":">{System.out.println(image);}
    |<IGUAL:"=">{System.out.println(image);}
    |<PUNTO:".">{System.out.println(image);}
	
    |<MAS:"+"> {System.out.println(image);}
    |<MENOS:"-"> {System.out.println(image);}
    |<POR:"*"> {System.out.println(image);}
    |<DIVISION:"/"> {System.out.println(image);}
    |<POTENCIA:"^"> {System.out.println(image);}
    |<AUMENTO:"++"> {System.out.println(image);}
    |<DECREMENTO:"--"> {System.out.println(image);}
	
    |<IGUALACION:"=="> {System.out.println(image);}
    |<DIFERENTE:"!="> {System.out.println(image);}
    |<MENOR:"<"> {System.out.println(image);}
    |<MAYOR:">"> {System.out.println(image);}
    |<MENORIGUAL:"<="> {System.out.println(image);}
    |<MAYORIGUAL:">="> {System.out.println(image);}  
    |<AND:"&&"> {System.out.println(image);}
    |<OR:"||"> {System.out.println(image);}
    |<NOT:"!"> {System.out.println(image);}	
    |<MENOR_2:"<<"> {System.out.println(image);}
    |<MAYOR_2:">>"> {System.out.println(image);}

    |<TOKEN_CREAR:("crear")> {System.out.println(image);}
    |<TOKEN_BASE_DATOS:("base_datos")> {System.out.println(image);}
    |<TOKEN_TABLA:("tabla")> {System.out.println(image);}
    |<TOKEN_NULO:("nulo")> {System.out.println(image);}
    |<TOKEN_NO_NULO:("no nulo")> {System.out.println(image);}
    |<TOKEN_AUTOINCREMETABLE:("autoincrementable")> {System.out.println(image);}
    |<TOKEN_LLAVE_PRIMARIA:("llave_primaria")> {System.out.println(image);}
    |<TOKEN_LLAVE_FORANEA:("llave_foranea")> {System.out.println(image);}
    |<TOKEN_OBJETO:("objeto")> {System.out.println(image);}
    |<TOKEN_PROCEDIMIENTO:("procedimiento")> {System.out.println(image);}
    |<TOKEN_FUNCION:("funcion")> {System.out.println(image);}
    |<TOKEN_RETORNO:("retorno")> {System.out.println(image);}
    |<TOKEN_USUARIO:("usuario")> {System.out.println(image);}
    |<TOKEN_COLOCAR:("colocar")> {System.out.println(image);}
    |<TOKEN_PASSWORD:("password")> {System.out.println(image);}
    |<TOKEN_USAR:("usar")> {System.out.println(image);}
    |<TOKEN_ALTERAR:("alterar")> {System.out.println(image);}
    |<TOKEN_AGREGAR:("agregar")> {System.out.println(image);}
    |<TOKEN_QUITAR:("quitar")> {System.out.println(image);}
    |<TOKEN_CAMBIAR:("cambiar")> {System.out.println(image);}
    |<TOKEN_ELIMINAR:("eliminar")> {System.out.println(image);}
    |<TOKEN_INSERTAR:("insertar en")> {System.out.println(image);}
    |<TOKEN_VALORES:("valores")> {System.out.println(image);}
    |<TOKEN_ACTUALIZAR:("actualizar")> {System.out.println(image);}
    |<TOKEN_DONDE:("donde")> {System.out.println(image);}
    |<TOKEN_BORRAR:("borrar en")> {System.out.println(image);}
    |<TOKEN_SELECCIONAR:("seleccionar")> {System.out.println(image);}
    |<TOKEN_DE:(("de"))> {System.out.println(image);}
    |<TOKEN_ORDENAR:("ordenar por")> {System.out.println(image);}
    |<TOKEN_ASC:("asc")> {System.out.println(image);}
    |<TOKEN_DESC:("desc")> {System.out.println(image);}
    |<TOKEN_OTORGAR:("otorgar permisos")> {System.out.println(image);}
    |<TOKEN_DENEGAR:("denegar permisos")> {System.out.println(image);}
    |<TOKEN_DECLARAR:(("declarar"))> {System.out.println(image);}
    |<TOKEN_SI:(("si"))> {System.out.println(image);}
    |<TOKEN_SINO:(("sino"))> {System.out.println(image);}
    |<TOKEN_SELECCIONA:(("selecciona"))> {System.out.println(image);}
    |<TOKEN_CASO:(("caso"))> {System.out.println(image);}
    |<TOKEN_DEFECTO:(("defecto"))> {System.out.println(image);}
    |<TOKEN_PARA:(("para"))> {System.out.println(image);}
    |<TOKEN_MIENTRAS:(("mientras"))> {System.out.println(image);}
    |<TOKEN_DETENER:(("detener"))> {System.out.println(image);}
    |<TOKEN_IMPRIMIR:(("imprimir"))> {System.out.println(image);}
    |<TOKEN_FECHA:(("fecha"))> {System.out.println(image);}
    |<TOKEN_FECHA_HORA:(("fecha_hora"))> {System.out.println(image);}
    |<TOKEN_CONTAR:(("contar"))> {System.out.println(image);}
    |<TOKEN_BACKUP_USQL:(("backup usqldump"))> {System.out.println(image);}
    |<TOKEN_BACKUP_COMPLETO:(("backup completo"))> {System.out.println(image);}
    |<TOKEN_RESTAURAR_USQL:(("restaurar usqldump"))> {System.out.println(image);}
    |<TOKEN_RESTAURAR_COMPLETO:(("restaurar completo"))> {System.out.println(image);}
	
    |<TOKEN_TEXT: ("text")> {System.out.println(image);}
    |<TOKEN_INTEGER: ("integer")> {System.out.println(image);}
    |<TOKEN_DOUBLE: ("double")> {System.out.println(image);}
    |<TOKEN_BOOL:("bool")> {System.out.println(image);}
    |<TOKEN_DATE: ("date")> {System.out.println(image);}
    |<TOKEN_DATETIME: ("datetime")> {System.out.println(image);}

    |<CADENA:"\"" (~["\""])*"\""> {System.out.println(image);}
    |<ENTERO: (["0"-"9"])+ > {System.out.println(image);}
    |<#NUMERO: ["0"-"9"]>
    |<DECIMAL: (<NUMERO>)+(".")((<NUMERO>))> {System.out.println(image);}
    |<ID: (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*> {System.out.println(image);}
    |<VARIABLE: "@"(["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*> {System.out.println(image);}
}

SKIP: 
{
  " "
| "\n"
| "\r"
| "\t"
}

SPECIAL_TOKEN:
{
    <COMENTARIO_LINEA: "#"(~["\n"])*>
    |<COMENTARIO_MULTI: "#*"(~["*"])*"*#">
}

void S():
{}
{
    LISTA_SENTENCIA_GLOBAL()
}

void LISTA_SENTENCIA_GLOBAL():
{}
{ 
    (
     CREAR()|USAR_BD()|ALTERAR()|ELIMINAR()|
     INSERTAR()|ACTUALIZAR()|BORRAR()|
     SELECCIONAR()<PYCOMA>|OTORGAR()|DENEGAR()|DECLARAR()|
     BACKUP()|RESTAURAR()|LLAMADA_METODO_FUNCION()
     )
    (LISTA_SENTENCIA_GLOBAL())?
}

void LISTA_SENTENCIA_LOCAL():
{}
{ 
    (
    RETORNO()|INSERTAR()|ACTUALIZAR()|BORRAR()|
    SELECCIONAR()<PYCOMA>|DECLARAR()|ASIGNAR()|
    SI()|SELECCIONA()|PARA()|MIENTRAS()|
    DETENER()|LLAMADA_METODO_FUNCION()
    ) 
    (LISTA_SENTENCIA_LOCAL())?
}

void CREAR():
{}
{
    <TOKEN_CREAR> (CREAR_BD()|CREAR_TABLA()|CREAR_OBJETO()|CREAR_FUNCION()|CREAR_PROCEDIMIENTO()|CREAR_USUARIO())
}

void CREAR_BD():
{}
{
    <TOKEN_BASE_DATOS> <ID> <PYCOMA>
}

void CREAR_TABLA():
{}
{
    <TOKEN_TABLA> <ID> <PAR_ABRE> LISTA_PARAMETRO_TABLA() <PAR_CIERRA> <PYCOMA>
}

void LISTA_PARAMETRO_TABLA():
{}
{
    PARAMETRO_TABLA() (<COMA> LISTA_PARAMETRO_TABLA())?
}

void PARAMETRO_TABLA():
{}
{
    TIPO_DATO() <ID> (LISTA_COMPLEMENTO_PARAMETRO_TABLA())?
}

void LISTA_COMPLEMENTO_PARAMETRO_TABLA():
{}
{
COMPLEMENTO_PARAMETRO_TABLA() (LISTA_COMPLEMENTO_PARAMETRO_TABLA())?
}

void COMPLEMENTO_PARAMETRO_TABLA():
{}
{
    <TOKEN_NULO>
    |<TOKEN_NO_NULO>
    |<TOKEN_AUTOINCREMETABLE>
    |<TOKEN_LLAVE_PRIMARIA>
    |<TOKEN_LLAVE_FORANEA> <ID>
}


void TIPO_DATO():
{}
{
    <TOKEN_TEXT>
    |<TOKEN_INTEGER>
    |<TOKEN_DOUBLE>
    |<TOKEN_BOOL>
    |<TOKEN_DATE>
    |<TOKEN_DATETIME>
    |<ID>
}

void CREAR_OBJETO():
{}
{
    <TOKEN_OBJETO> <ID> <PAR_ABRE> LISTA_PARAMETRO() <PAR_CIERRA> <PYCOMA>
}

void LISTA_PARAMETRO():
{}
{
    TIPO_DATO() <ID> (<COMA> LISTA_PARAMETRO())?
}

void CREAR_FUNCION():
{}
{
    <TOKEN_FUNCION> <ID> <PAR_ABRE> (LISTA_PARAMETRO_PROC_FUN())? <PAR_CIERRA> TIPO_DATO() <LLAVE_ABRE>  LISTA_SENTENCIA_LOCAL()  <LLAVE_CIERRA>
}

void LISTA_PARAMETRO_PROC_FUN():
{}
{
     TIPO_DATO() <VARIABLE> (<COMA> LISTA_PARAMETRO_PROC_FUN())?
}

void CREAR_PROCEDIMIENTO():
{}
{
     <TOKEN_PROCEDIMIENTO> <ID> <PAR_ABRE> (LISTA_PARAMETRO_PROC_FUN())? <PAR_CIERRA> <LLAVE_ABRE> LISTA_SENTENCIA_LOCAL() <LLAVE_CIERRA>
}

void CREAR_USUARIO():
{}
{
    <TOKEN_USUARIO> <ID> <TOKEN_COLOCAR> <TOKEN_PASSWORD> <IGUAL> <CADENA> <PYCOMA>
}

void RETORNO():
{}
{
    <TOKEN_RETORNO> CONDICION() <PYCOMA>
}

void LISTA_COND():
{}
{
    CONDICION() (<COMA> LISTA_COND())?
}

void USAR_BD():
{}
{
    <TOKEN_USAR> <ID> <PYCOMA>
}

void ALTERAR():
{}
{
    <TOKEN_ALTERAR> (ALTERAR_TABLA()|ALTERAR_OBJETO()|ALTERAR_USUARIO())
}

void LISTA_ID():
{}
{
    <ID> (<COMA> LISTA_ID())?
}

void ALTERAR_TABLA():
{}
{
    <TOKEN_TABLA> <ID> (<TOKEN_AGREGAR> <PAR_ABRE> LISTA_PARAMETRO_TABLA() <PAR_CIERRA>
    |<TOKEN_QUITAR> LISTA_ID()) <PYCOMA>
}

void ALTERAR_OBJETO():
{}
{
     <TOKEN_OBJETO> <ID> (<TOKEN_AGREGAR> <PAR_ABRE> LISTA_PARAMETRO() <PAR_CIERRA>
    |<TOKEN_QUITAR> LISTA_ID()) <PYCOMA>
}

void ALTERAR_USUARIO():
{}
{
    <TOKEN_USUARIO> <ID> <TOKEN_CAMBIAR> <TOKEN_PASSWORD> <IGUAL> <CADENA> <PYCOMA>
}

void ELIMINAR():
{}
{
    <TOKEN_ELIMINAR> (<TOKEN_TABLA> | <TOKEN_BASE_DATOS> | <TOKEN_OBJETO> | <TOKEN_USUARIO>) <ID> <PYCOMA>
}

void INSERTAR():
{}
{
    <TOKEN_INSERTAR> <TOKEN_TABLA> <ID> <PAR_ABRE> (LISTA_ID() <PAR_CIERRA> <TOKEN_VALORES> <PAR_ABRE>)? LISTA_COND() <PAR_CIERRA> <PYCOMA>
}

void ACTUALIZAR():
{}
{
    <TOKEN_ACTUALIZAR> <TOKEN_TABLA> <ID> <PAR_ABRE> LISTA_ID() <PAR_CIERRA> <TOKEN_VALORES> <PAR_ABRE> LISTA_COND() <PAR_CIERRA> (<TOKEN_DONDE> CONDICION())? <PYCOMA>
}

void BORRAR():
{}
{
    <TOKEN_BORRAR> <TOKEN_TABLA> <ID> (<TOKEN_DONDE> CONDICION())? <PYCOMA>
}

void SELECCIONAR():
{}
{
    <TOKEN_SELECCIONAR> (LISTA_ID() | <POR>) <TOKEN_DE> LISTA_ID() (<TOKEN_DONDE> CONDICION())? (<TOKEN_ORDENAR> <ID> (<TOKEN_ASC>|<TOKEN_DESC>))? 
}


void OTORGAR():
{}
{
     <TOKEN_OTORGAR> LISTA_ID() <ID> <PUNTO> (<POR> | <ID>) <PYCOMA>
}

void DENEGAR():
{}
{
      <TOKEN_DENEGAR> LISTA_ID() <ID> <PUNTO> (<POR> | <ID>) <PYCOMA>
}

void DECLARAR():
{}
{
        <TOKEN_DECLARAR> LISTA_VARIABLE() ((TIPO_DATO_DECLARAR() (<IGUAL> CONDICION())?)| <ID> ) <PYCOMA>
}

void LISTA_VARIABLE():
{}
{
       <VARIABLE> (<COMA> LISTA_VARIABLE())?
}

void TIPO_DATO_DECLARAR():
{}
{
    <TOKEN_TEXT>
    |<TOKEN_INTEGER>
    |<TOKEN_DOUBLE>
    |<TOKEN_BOOL>
    |<TOKEN_DATE>
    |<TOKEN_DATETIME>
}

void ASIGNAR():
{}
{
    <VARIABLE>(<PUNTO> <ID>)? <IGUAL> CONDICION() <PYCOMA>
}

void SI():
{}
{
  <TOKEN_SI> <PAR_ABRE> CONDICION() <PAR_CIERRA> <LLAVE_ABRE> LISTA_SENTENCIA_LOCAL() <LLAVE_CIERRA> (<TOKEN_SINO> <LLAVE_ABRE> LISTA_SENTENCIA_LOCAL() <LLAVE_CIERRA>)?
}

void SELECCIONA():
{}
{
    <TOKEN_SELECCIONA> <PAR_ABRE> CONDICION() <PAR_CIERRA> <LLAVE_ABRE> LISTA_CASO() <LLAVE_CIERRA>
}

void LISTA_CASO():
{}
{
    <TOKEN_CASO> VALOR_CASO() <DOSPUNTOS> LISTA_SENTENCIA_LOCAL() (LISTA_CASO())? (DEFECTO())?
}

void VALOR_CASO():
{}
{
    <CADENA>
    |<ENTERO>
    |<DECIMAL>
}

void DEFECTO():
{}
{
    <TOKEN_DEFECTO> <DOSPUNTOS> LISTA_SENTENCIA_LOCAL()
}

void PARA():
{}
{
    <TOKEN_PARA> <PAR_ABRE> <TOKEN_DECLARAR> <VARIABLE> <TOKEN_INTEGER> <IGUAL> CONDICION()
    <PYCOMA> CONDICION() <PYCOMA> 
    (<AUMENTO>|<DECREMENTO>) <PAR_CIERRA> 
    <LLAVE_ABRE> LISTA_SENTENCIA_LOCAL() <LLAVE_CIERRA>
}


void MIENTRAS():
{}
{
    <TOKEN_MIENTRAS> <PAR_ABRE> CONDICION() <PAR_CIERRA> <LLAVE_ABRE> LISTA_SENTENCIA_LOCAL() <LLAVE_CIERRA>
}

void DETENER():
{}
{
    <TOKEN_DETENER><PYCOMA>
}

void FUNCIONES_PROPIAS_DEL_LENGUAJE():
{}
{
     <TOKEN_FECHA> <PAR_ABRE> <PAR_CIERRA>
    |<TOKEN_FECHA_HORA> <PAR_ABRE> <PAR_CIERRA>
    |<TOKEN_CONTAR> <PAR_ABRE> <MENOR_2> SELECCIONAR() <MAYOR_2> <PAR_CIERRA>
}

void BACKUP():
{}
{
    (<TOKEN_BACKUP_USQL> | <TOKEN_BACKUP_COMPLETO>) <ID> <ID> <PYCOMA>
}

void RESTAURAR():
{}
{
    (<TOKEN_RESTAURAR_USQL> | <TOKEN_RESTAURAR_COMPLETO>) <CADENA> <PYCOMA>
}

void CONDICION():
{}
{
    COND_AND() (<OR> CONDICION())? 
}

void COND_AND():
{}
{
    COND_NOT() (<AND> COND_AND())?
}

void COND_NOT():
{}
{ 
    (<NOT>)? REL()
}

void REL():
{}
{
   EXP() ((<IGUALACION> | <DIFERENTE> | <MAYOR> | <MENOR> | <MAYORIGUAL> | <MENORIGUAL>) REL())?
}

void EXP():
{}
{
  F() ((<MAS>|<MENOS>) EXP())?
}

void F():
{}
{
 E() ((<POR>|<DIVISION>) F())?  
}

void E():
{}
{
 H() (<POTENCIA> E())?
}

void H():
{}
{
<VARIABLE>(<PUNTO><ID>)?
|LLAMADA_METODO_OBJETO()
|FUNCIONES_PROPIAS_DEL_LENGUAJE()
|<ENTERO>
|<CADENA>
|<DECIMAL>
}

void LLAMADA_METODO_OBJETO():
{}
{
    <ID> ((<PAR_ABRE> (LISTA_COND())? <PAR_CIERRA>) | <PUNTO> <ID>)?
}

void LLAMADA_METODO_FUNCION():
{}
{
    <ID> <PAR_ABRE> (LISTA_COND())? <PAR_CIERRA> <PYCOMA>
    |<TOKEN_IMPRIMIR> <PAR_ABRE> (CONDICION())? <PAR_CIERRA> <PYCOMA>
}