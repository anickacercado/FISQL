options {
IGNORE_CASE = true;
STATIC = false;
OUTPUT_DIRECTORY="C://Users//anick//Documents//NetBeansProjects//[Compi2]Proyecto1_201212859//src//analizador//";
}

PARSER_BEGIN(analizador)
package analizador;

public class analizador {
  public static void main(String args[]) throws ParseException {
    analizador parser = new analizador(System.in);
    parser.S();
    System.out.println("Exito!!");
  }
}
PARSER_END(analizador)

TOKEN:
{
    
    <MAS:"+"> {System.out.println(image);}
    |<MENOS:"-"> {System.out.println(image);}
    |<POR:"*"> {System.out.println(image);}
    |<DIVISION:"/"> {System.out.println(image);}
    |<POTENCIA:"^"> {System.out.println(image);}
    |<AUMENTO:"++"> {System.out.println(image);}
    |<DECREMENTO:"--"> {System.out.println(image);}
    |<SUMASIMPLIFICADA:"+="> {System.out.println(image);}
    |<RESTASIMPLIFICADA:"-="> {System.out.println(image);}
}

TOKEN:
{
    <PAR_IZQ:"(">{System.out.println(image);}
    |<PAR_DER:")">{System.out.println(image);}
    |<LLAVE_IZQ:"{">{System.out.println(image);}
    |<LLAVE_DER:"}">{System.out.println(image);}
    |<COR_IZQ:"[">{System.out.println(image);}
    |<COR_DER:"]">{System.out.println(image);}
    |<PCOMA:";">{System.out.println(image);}
    |<COMA:",">{System.out.println(image);}
    |<DOSP:":">{System.out.println(image);}
    |<IGUAL:"=">{System.out.println(image);}
    |<PUNTO:".">{System.out.println(image);}
}

TOKEN:
{
  
    <IGUALACION:"=="> {System.out.println(image);}
    |<DIFERENCIACION:"!="> {System.out.println(image);}
    |<MENOR:"<"> {System.out.println(image);}
    |<MAYOR:">"> {System.out.println(image);}
    |<MENORIGUAL:"<="> {System.out.println(image);}
    |<MAYORIGUAL:">="> {System.out.println(image);}  
    |<AND:"&&"> {System.out.println(image);}
    |<OR:"||"> {System.out.println(image);}
    |<NOT:"!"> {System.out.println(image);}
    |<MENOR_2:"<<"> {System.out.println(image);}
    |<MAYOR_2:">>"> {System.out.println(image);}

}


TOKEN:
{
  
  <T_TEXT: ("text")> {System.out.println(image);}
  |<T_INTEGER: ("integer")> {System.out.println(image);}
  |<T_DOUBLE: ("double")> {System.out.println(image);}
  |<T_BOOL:("bool")> {System.out.println(image);}
  |<T_DATE: ("date")> {System.out.println(image);}
  |<T_DATETIME: ("datetime")> {System.out.println(image);}
}


TOKEN:
{
  
    <T_CREAR:("crear")> {System.out.println(image);}
    |<T_BASE_DATOS:("base_datos")> {System.out.println(image);}
    |<T_TABLA:("tabla")> {System.out.println(image);}
    |<T_NULO:("nulo")> {System.out.println(image);}
    |<T_NO_NULO:("no nulo")> {System.out.println(image);}
    |<T_AUTOINCREMETABLE:("autoincrementable")> {System.out.println(image);}
    |<T_LLAVE_PRIMARIA:("llave_primaria")> {System.out.println(image);}
    |<T_LLAVE_FORANEA:("llave_foranea")> {System.out.println(image);}
    |<T_OBJETO:("objeto")> {System.out.println(image);}
    |<T_PROCEDIMIENTO:("procedimiento")> {System.out.println(image);}
    |<T_FUNCION:("funcion")> {System.out.println(image);}
    |<T_RETORNO:("retorno")> {System.out.println(image);}
    |<T_USUARIO:("usuario")> {System.out.println(image);}
    |<T_COLOCAR:("colocar")> {System.out.println(image);}
    |<T_PASSWORD:("password")> {System.out.println(image);}
    |<T_USAR:("usar")> {System.out.println(image);}
    |<T_ALTERAR:("alterar")> {System.out.println(image);}
    |<T_AGREGAR:("agregar")> {System.out.println(image);}
    |<T_QUITAR:("quitar")> {System.out.println(image);}
    |<T_CAMBIAR:("cambiar")> {System.out.println(image);}
    |<T_ELIMINAR:("eliminar")> {System.out.println(image);}
    |<T_INSERTAR:("insertar en")> {System.out.println(image);}
    |<T_VALORES:("valores")> {System.out.println(image);}
    |<T_ACTUALIZAR:("actualizar")> {System.out.println(image);}
    |<T_DONDE:("donde")> {System.out.println(image);}
    |<T_BORRAR:("borrar en")> {System.out.println(image);}
    |<T_SELECCIONAR:("seleccionar")> {System.out.println(image);}
    |<T_DE:(("de"))> {System.out.println(image);}
    |<T_ORDENAR:("ordenar por")> {System.out.println(image);}
    |<T_ASC:("asc")> {System.out.println(image);}
    |<T_DESC:("desc")> {System.out.println(image);}
    |<T_OTORGAR:("otorgar permisos")> {System.out.println(image);}
    |<T_DENEGAR:("denegar permisos")> {System.out.println(image);}
    |<T_DECLARAR:(("declarar"))> {System.out.println(image);}
    |<T_SI:(("si"))> {System.out.println(image);}
    |<T_SINO:(("sino"))> {System.out.println(image);}
    |<T_SELECCIONA:(("selecciona"))> {System.out.println(image);}
    |<T_CASO:(("caso"))> {System.out.println(image);}
    |<T_DEFECTO:(("defecto"))> {System.out.println(image);}
    |<T_PARA:(("para"))> {System.out.println(image);}
    |<T_MIENTRAS:(("mientras"))> {System.out.println(image);}
    |<T_DETENER:(("detener"))> {System.out.println(image);}
    |<T_IMPRIMIR:(("imprimir"))> {System.out.println(image);}
    |<T_FECHA:(("fecha"))> {System.out.println(image);}
    |<T_FECHA_HORA:(("fecha_hora"))> {System.out.println(image);}
    |<T_CONTAR:(("contar"))> {System.out.println(image);}
    |<T_BACKUP_USQL:(("backup usqldump"))> {System.out.println(image);}
    |<T_BACKUP_COMPLETO:(("backup completo"))> {System.out.println(image);}
    |<T_RESTAURAR_USQL:(("restaurar usqldump"))> {System.out.println(image);}
    |<T_RESTAURAR_COMPLETO:(("restaurar completo"))> {System.out.println(image);}
}   

TOKEN:
{  
    <CADENA:"\"" (~["\""])*"\""> {System.out.println(image);}
    |<ENTERO: (["0"-"9"])+ > {System.out.println(image);}
    |<#NUMERO: ["0"-"9"]>
    |<DECIMAL: (<NUMERO>)+(".")((<NUMERO>))> {System.out.println(image);}
    |<ID: (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*> {System.out.println(image);}
    |<VARIABLE: "@"(["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*> {System.out.println(image);}
}

SKIP: 
{
  " "
| "\n"
| "\r"
| "\t"
}

SPECIAL_TOKEN:
{
    <COMENTARIO_LINEA: "#"(~["\n"])*>
    |<COMENTARIO_MULTI: "#*"(~["*"])*"*#">
}

void S():
{}
{
    LISTA_SENTENCIA_GLOBAL()
}

void LISTA_SENTENCIA_GLOBAL():
{}
{ 
    (
     CREAR()|USAR_BD()|ALTERAR()|ELIMINAR()|
     INSERTAR()|ACTUALIZAR()|BORRAR()|
     SELECCIONAR()<PCOMA>|OTORGAR()|DENEGAR()|DECLARAR()|
     BACKUP()|RESTAURAR()|LLAMADA_METODO_FUNCION()
     )
    (LISTA_SENTENCIA_GLOBAL())?
}

void LISTA_SENTENCIA_LOCAL():
{}
{ 
    (
    RETORNO()|INSERTAR()|ACTUALIZAR()|BORRAR()|
    SELECCIONAR()<PCOMA>|DECLARAR()|ASIGNAR()|
    SI()|SELECCIONA()|PARA()|MIENTRAS()|
    DETENER()|LLAMADA_METODO_FUNCION()
    ) 
    (LISTA_SENTENCIA_LOCAL())?
}

void CREAR():
{}
{
    <T_CREAR> (CREAR_BD()|CREAR_TABLA()|CREAR_OBJETO()|CREAR_FUNCION()|CREAR_PROCEDIMIENTO()|CREAR_USUARIO())
}

void CREAR_BD():
{}
{
    <T_BASE_DATOS> <ID> <PCOMA>
}

void CREAR_TABLA():
{}
{
    <T_TABLA> <ID> <PAR_IZQ> LISTA_PARAMETRO_TABLA() <PAR_DER> <PCOMA>
}

void LISTA_PARAMETRO_TABLA():
{}
{
    PARAMETRO_TABLA() (<COMA> LISTA_PARAMETRO_TABLA())?
}

void PARAMETRO_TABLA():
{}
{
    TIPO_DATO() <ID> (LISTA_COMPLEMENTO_PARAMETRO_TABLA())?
}

void LISTA_COMPLEMENTO_PARAMETRO_TABLA():
{}
{
COMPLEMENTO_PARAMETRO_TABLA() (LISTA_COMPLEMENTO_PARAMETRO_TABLA())?
}

void COMPLEMENTO_PARAMETRO_TABLA():
{}
{
    <T_NULO>
    |<T_NO_NULO>
    |<T_AUTOINCREMETABLE>
    |<T_LLAVE_PRIMARIA>
    |<T_LLAVE_FORANEA> <ID>
}


void TIPO_DATO():
{}
{
    <T_TEXT>
    |<T_INTEGER>
    |<T_DOUBLE>
    |<T_BOOL>
    |<T_DATE>
    |<T_DATETIME>
    |<ID>
}

void CREAR_OBJETO():
{}
{
    <T_OBJETO> <ID> <PAR_IZQ> LISTA_PARAMETRO() <PAR_DER> <PCOMA>
}

void LISTA_PARAMETRO():
{}
{
    TIPO_DATO() <ID> (<COMA> LISTA_PARAMETRO())?
}

void CREAR_FUNCION():
{}
{
    <T_FUNCION> <ID> <PAR_IZQ> (LISTA_PARAMETRO_PROC_FUN())? <PAR_DER> TIPO_DATO() <LLAVE_IZQ>  LISTA_SENTENCIA_LOCAL()  <LLAVE_DER>
}

void LISTA_PARAMETRO_PROC_FUN():
{}
{
     TIPO_DATO() <VARIABLE> (<COMA> LISTA_PARAMETRO_PROC_FUN())?
}

void CREAR_PROCEDIMIENTO():
{}
{
     <T_PROCEDIMIENTO> <ID> <PAR_IZQ> (LISTA_PARAMETRO_PROC_FUN())? <PAR_DER> <LLAVE_IZQ> LISTA_SENTENCIA_LOCAL() <LLAVE_DER>
}

void CREAR_USUARIO():
{}
{
    <T_USUARIO> <ID> <T_COLOCAR> <T_PASSWORD> <IGUAL> <CADENA> <PCOMA>
}

void RETORNO():
{}
{
    <T_RETORNO> CONDICION() <PCOMA>
}

void LISTA_COND():
{}
{
    CONDICION() (<COMA> LISTA_COND())?
}

void USAR_BD():
{}
{
    <T_USAR> <ID> <PCOMA>
}

void ALTERAR():
{}
{
    <T_ALTERAR> (ALTERAR_TABLA()|ALTERAR_OBJETO()|ALTERAR_USUARIO())
}

void LISTA_ID():
{}
{
    <ID> (<COMA> LISTA_ID())?
}

void ALTERAR_TABLA():
{}
{
    <T_TABLA> <ID> (<T_AGREGAR> <PAR_IZQ> LISTA_PARAMETRO_TABLA() <PAR_DER>
    |<T_QUITAR> LISTA_ID()) <PCOMA>
}

void ALTERAR_OBJETO():
{}
{
     <T_OBJETO> <ID> (<T_AGREGAR> <PAR_IZQ> LISTA_PARAMETRO() <PAR_DER>
    |<T_QUITAR> LISTA_ID()) <PCOMA>
}

void ALTERAR_USUARIO():
{}
{
    <T_USUARIO> <ID> <T_CAMBIAR> <T_PASSWORD> <IGUAL> <CADENA> <PCOMA>
}

void ELIMINAR():
{}
{
    <T_ELIMINAR> (<T_TABLA> | <T_BASE_DATOS> | <T_OBJETO> | <T_USUARIO>) <ID> <PCOMA>
}

void INSERTAR():
{}
{
    <T_INSERTAR> <T_TABLA> <ID> <PAR_IZQ> (LISTA_ID() <PAR_DER> <T_VALORES> <PAR_IZQ>)? LISTA_COND() <PAR_DER> <PCOMA>
}

void ACTUALIZAR():
{}
{
    <T_ACTUALIZAR> <T_TABLA> <ID> <PAR_IZQ> LISTA_ID() <PAR_DER> <T_VALORES> <PAR_IZQ> LISTA_COND() <PAR_DER> (<T_DONDE> CONDICION())? <PCOMA>
}

void BORRAR():
{}
{
    <T_BORRAR> <T_TABLA> <ID> (<T_DONDE> CONDICION())? <PCOMA>
}

void SELECCIONAR():
{}
{
    <T_SELECCIONAR> (LISTA_ID() | <POR>) <T_DE> LISTA_ID() (<T_DONDE> CONDICION())? (<T_ORDENAR> <ID> (<T_ASC>|<T_DESC>))? 
}


void OTORGAR():
{}
{
     <T_OTORGAR> LISTA_ID() <ID> <PUNTO> (<POR> | <ID>) <PCOMA>
}

void DENEGAR():
{}
{
      <T_DENEGAR> LISTA_ID() <ID> <PUNTO> (<POR> | <ID>) <PCOMA>
}

void DECLARAR():
{}
{
        <T_DECLARAR> LISTA_VARIABLE() ((TIPO_DATO_DECLARAR() (<IGUAL> CONDICION())?)| <ID> ) <PCOMA>
}

void LISTA_VARIABLE():
{}
{
       <VARIABLE> (<COMA> LISTA_VARIABLE())?
}

void TIPO_DATO_DECLARAR():
{}
{
    <T_TEXT>
    |<T_INTEGER>
    |<T_DOUBLE>
    |<T_BOOL>
    |<T_DATE>
    |<T_DATETIME>
}

void ASIGNAR():
{}
{
    <VARIABLE>(<PUNTO> <ID>)? <IGUAL> CONDICION() <PCOMA>
}

void SI():
{}
{
  <T_SI> <PAR_IZQ> CONDICION() <PAR_DER> <LLAVE_IZQ> LISTA_SENTENCIA_LOCAL() <LLAVE_DER> (<T_SINO> <LLAVE_IZQ> LISTA_SENTENCIA_LOCAL() <LLAVE_DER>)?
}

void SELECCIONA():
{}
{
    <T_SELECCIONA> <PAR_IZQ> CONDICION() <PAR_DER> <LLAVE_IZQ> LISTA_CASO() <LLAVE_DER>
}

void LISTA_CASO():
{}
{
    <T_CASO> VALOR_CASO() <DOSP> LISTA_SENTENCIA_LOCAL() (LISTA_CASO())? (DEFECTO())?
}

void VALOR_CASO():
{}
{
    <CADENA>
    |<ENTERO>
    |<DECIMAL>
}

void DEFECTO():
{}
{
    <T_DEFECTO> <DOSP> LISTA_SENTENCIA_LOCAL()
}

void PARA():
{}
{
    <T_PARA> <PAR_IZQ> <T_DECLARAR> <VARIABLE> <T_INTEGER> <IGUAL> CONDICION()
    <PCOMA> CONDICION() <PCOMA> 
    (<AUMENTO>|<DECREMENTO>) <PAR_DER> 
    <LLAVE_IZQ> LISTA_SENTENCIA_LOCAL() <LLAVE_DER>
}


void MIENTRAS():
{}
{
    <T_MIENTRAS> <PAR_IZQ> CONDICION() <PAR_DER> <LLAVE_IZQ> LISTA_SENTENCIA_LOCAL() <LLAVE_DER>
}

void DETENER():
{}
{
    <T_DETENER><PCOMA>
}

void FUNCIONES_PROPIAS_DEL_LENGUAJE():
{}
{
     <T_FECHA> <PAR_IZQ> <PAR_DER>
    |<T_FECHA_HORA> <PAR_IZQ> <PAR_DER>
    |<T_CONTAR> <PAR_IZQ> <MENOR_2> SELECCIONAR() <MAYOR_2> <PAR_DER>
}

void BACKUP():
{}
{
    (<T_BACKUP_USQL> | <T_BACKUP_COMPLETO>) <ID> <ID> <PCOMA>
}

void RESTAURAR():
{}
{
    (<T_RESTAURAR_USQL> | <T_RESTAURAR_COMPLETO>) <CADENA> <PCOMA>
}

void CONDICION():
{}
{
    COND_AND() (<OR> CONDICION())? 
}

void COND_AND():
{}
{
    COND_NOT() (<AND> COND_AND())?
}

void COND_NOT():
{}
{ 
    (<NOT>)? REL()
}

void REL():
{}
{
   EXP() ((<IGUALACION> | <DIFERENCIACION> | <MAYOR> | <MENOR> | <MAYORIGUAL> | <MENORIGUAL>) REL())?
}

void EXP():
{}
{
  F() ((<MAS>|<MENOS>) EXP())?
}

void F():
{}
{
 E() ((<POR>|<DIVISION>) F())?  
}

void E():
{}
{
 H() (<POTENCIA> E())?
}

void H():
{}
{
<VARIABLE>(<PUNTO><ID>)?
|LLAMADA_METODO_OBJETO()
|FUNCIONES_PROPIAS_DEL_LENGUAJE()
|<ENTERO>
|<CADENA>
|<DECIMAL>
}

void LLAMADA_METODO_OBJETO():
{}
{
    <ID> ((<PAR_IZQ> (LISTA_COND())? <PAR_DER>) | <PUNTO> <ID>)?
}

void LLAMADA_METODO_FUNCION():
{}
{
    <ID> <PAR_IZQ> (LISTA_COND())? <PAR_DER> <PCOMA>
    |<T_IMPRIMIR> <PAR_IZQ> (CONDICION())? <PAR_DER> <PCOMA>
}