options {
IGNORE_CASE = true;
STATIC = false;
    OUTPUTOKEN_DIRECTORY="C://Users//anick//Documents//NetBeansProjects//[Compi2]Proyecto1_201212859//FISQL//src//usql//";
}

PARSER_BEGIN(analizador)
package usql;
import estructuraUSQL.*;
import java.util.ArrayList;
import archivos.memoria;
import archivos.parametro;
import archivos.db.propertyField;
import DML.insert;
import DDL.*;


public class analizador {
  private boolean isMetodo=false;

    private String nulo ="N";
    private String no_nulo="N";
    private String autoincrementable="N";
    private String llave_primaria="N";
    private String llave_foranea="N";
  
    public void limpiar(){
      nulo="N";
      no_nulo="N";
      autoincrementable="N";
      llave_primaria="N";
      llave_foranea="N";
    }

  public static void main(String args[]) throws ParseException {
    analizador parser = new analizador(System.in);
    parser.S();
  }
}
PARSER_END(analizador)

TOKEN:
{   
    <PAR_ABRE:"(">{System.out.println(image);}
    |<PAR_CIERRA:")">{System.out.println(image);}
    |<LLAVE_ABRE:"{">{System.out.println(image);}
    |<LLAVE_CIERRA:"}">{System.out.println(image);}
    |<PYCOMA:";">{System.out.println(image);}
    |<COMA:",">{System.out.println(image);}
    |<DOSPUNTOS:":">{System.out.println(image);}
    |<IGUAL:"=">{System.out.println(image);}
    |<PUNTO:".">{System.out.println(image);}
	
    |<MAS:"+"> {System.out.println(image);}
    |<MENOS:"-"> {System.out.println(image);}
    |<POR:"*"> {System.out.println(image);}
    |<DIVISION:"/"> {System.out.println(image);}
    |<POTENCIA:"^"> {System.out.println(image);}
    |<AUMENTO:"++"> {System.out.println(image);}
    |<DECREMENTO:"--"> {System.out.println(image);}
	
    |<IGUALACION:"=="> {System.out.println(image);}
    |<DIFERENTE:"!="> {System.out.println(image);}
    |<MENOR:"<"> {System.out.println(image);}
    |<MAYOR:">"> {System.out.println(image);}
    |<MENORIGUAL:"<="> {System.out.println(image);}
    |<MAYORIGUAL:">="> {System.out.println(image);}  
    |<AND:"&&"> {System.out.println(image);}
    |<OR:"||"> {System.out.println(image);}
    |<NOT:"!"> {System.out.println(image);}	
    |<MENOR_2:"<<"> {System.out.println(image);}
    |<MAYOR_2:">>"> {System.out.println(image);}

    |<TOKEN_CREAR:("crear")> {System.out.println(image);}
    |<TOKEN_BASE_DATOS:("base_datos")> {System.out.println(image);}
    |<TOKEN_TABLA:("tabla")> {System.out.println(image);}
    |<TOKEN_NULO:("nulo")> {System.out.println(image);}
    |<TOKEN_NO_NULO:("no nulo")> {System.out.println(image);}
    |<TOKEN_AUTOINCREMETABLE:("autoincrementable")> {System.out.println(image);}
    |<TOKEN_LLAVE_PRIMARIA:("llave_primaria")> {System.out.println(image);}
    |<TOKEN_LLAVE_FORANEA:("llave_foranea")> {System.out.println(image);}
    |<TOKEN_OBJETO:("objeto")> {System.out.println(image);}
    |<TOKEN_PROCEDIMIENTO:("procedimiento")> {System.out.println(image);}
    |<TOKEN_FUNCION:("funcion")> {System.out.println(image);}
    |<TOKEN_RETORNO:("retorno")> {System.out.println(image);}
    |<TOKEN_USUARIO:("usuario")> {System.out.println(image);}
    |<TOKEN_COLOCAR:("colocar")> {System.out.println(image);}
    |<TOKEN_PASSWORD:("password")> {System.out.println(image);}
    |<TOKEN_USAR:("usar")> {System.out.println(image);}
    |<TOKEN_ALTERAR:("alterar")> {System.out.println(image);}
    |<TOKEN_AGREGAR:("agregar")> {System.out.println(image);}
    |<TOKEN_QUITAR:("quitar")> {System.out.println(image);}
    |<TOKEN_CAMBIAR:("cambiar")> {System.out.println(image);}
    |<TOKEN_ELIMINAR:("eliminar")> {System.out.println(image);}
    |<TOKEN_INSERTAR:("insertar en")> {System.out.println(image);}
    |<TOKEN_VALORES:("valores")> {System.out.println(image);}
    |<TOKEN_ACTUALIZAR:("actualizar")> {System.out.println(image);}
    |<TOKEN_DONDE:("donde")> {System.out.println(image);}
    |<TOKEN_BORRAR:("borrar en")> {System.out.println(image);}
    |<TOKEN_SELECCIONAR:("seleccionar")> {System.out.println(image);}
    |<TOKEN_DE:(("de"))> {System.out.println(image);}
    |<TOKEN_ORDENAR:("ordenar por")> {System.out.println(image);}
    |<TOKEN_ASC:("asc")> {System.out.println(image);}
    |<TOKEN_DESC:("desc")> {System.out.println(image);}
    |<TOKEN_OTORGAR:("otorgar permisos")> {System.out.println(image);}
    |<TOKEN_DENEGAR:("denegar permisos")> {System.out.println(image);}
    |<TOKEN_DECLARAR:(("declarar"))> {System.out.println(image);}
    |<TOKEN_SI:(("si"))> {System.out.println(image);}
    |<TOKEN_SINO:(("sino"))> {System.out.println(image);}
    |<TOKEN_SELECCIONA:(("selecciona"))> {System.out.println(image);}
    |<TOKEN_CASO:(("caso"))> {System.out.println(image);}
    |<TOKEN_DEFECTO:(("defecto"))> {System.out.println(image);}
    |<TOKEN_PARA:(("para"))> {System.out.println(image);}
    |<TOKEN_MIENTRAS:(("mientras"))> {System.out.println(image);}
    |<TOKEN_DETENER:(("detener"))> {System.out.println(image);}
    |<TOKEN_IMPRIMIR:(("imprimir"))> {System.out.println(image);}
    |<TOKEN_FECHA:(("fecha"))> {System.out.println(image);}
    |<TOKEN_FECHA_HORA:(("fecha_hora"))> {System.out.println(image);}
    |<TOKEN_CONTAR:(("contar"))> {System.out.println(image);}
    |<TOKEN_BACKUP_USQL:(("backup usqldump"))> {System.out.println(image);}
    |<TOKEN_BACKUP_COMPLETO:(("backup completo"))> {System.out.println(image);}
    |<TOKEN_RESTAURAR_USQL:(("restaurar usqldump"))> {System.out.println(image);}
    |<TOKEN_RESTAURAR_COMPLETO:(("restaurar completo"))> {System.out.println(image);}
	
    |<TOKEN_TEXT: ("text")> {System.out.println(image);}
    |<TOKEN_INTEGER: ("integer")> {System.out.println(image);}
    |<TOKEN_DOUBLE: ("double")> {System.out.println(image);}
    |<TOKEN_BOOL:("bool")> {System.out.println(image);}
    |<TOKEN_DATE: ("date")> {System.out.println(image);}
    |<TOKEN_DATETIME: ("datetime")> {System.out.println(image);}
    |<TOKEN_FALSO: ("falso")> {System.out.println(image);}
    |<TOKEN_VERDADERO: ("verdadero")> {System.out.println(image);}

    |<CADENA:"\"" (~["\""])*"\""> {System.out.println(image);}
    |<ENTERO: (["0"-"9"])+ > {System.out.println(image);}
    |<#NUMERO: ["0"-"9"]>
    |<DECIMAL: (<NUMERO>)+(".")((<NUMERO>))> {System.out.println(image);}
    |<ID: (["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*> {System.out.println(image);}
    |<VARIABLE: "@"(["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])*> {System.out.println(image);}
    |<DATE: (("0"["1"-"9"])|(["1"-"2"]["0"-"9"])| ("3" ["0"-"1"] )) "-" (("0"["1"-"9"])| "1"["0"-"2"]) "-" ["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]>{System.out.println(image);}
    |<DATETIME: (((("0"["1"-"9"])|(["1"-"2"]["0"-"9"])| ("3" ["0"-"1"] )) "-" (("0"["1"-"9"])| "1"["0"-"2"]) "-" ["0"-"9"]["0"-"9"]["0"-"9"]["0"-"9"]) " " (["0"-"1"]["0"-"9"])| ("2" ["0"-"3"] )) ":" (["0"-"5"]["0"-"9"]) ":" (["0"-"5"]["0"-"9"])>{System.out.println(image);}
}

SKIP: 
{
  " "
| "\n"
| "\r"
| "\t"
}

SPECIAL_TOKEN:
{
    <COMENTARIO_LINEA: "#"(~["\n"])*>
    |<COMENTARIO_MULTI: "#*"(~["*"])*"*#">
}

ejecutar S():
{ArrayList<simbolo> lsim= new ArrayList<simbolo>();}
{
    lsim=LISTA_SENTENCIA_GLOBAL(){return new ejecutar(lsim);}
}

ArrayList<simbolo> LISTA_SENTENCIA_GLOBAL():
{
	ArrayList<simbolo> lsim= new ArrayList<simbolo>();
	ArrayList<simbolo> lsim2= new ArrayList<simbolo>();
    simbolo rsim;
}
{ 
    (
     rsim=CREAR()					{lsim.add(rsim);}
	 |rsim=USAR_BD()				{lsim.add(rsim);}
	 |rsim=ALTERAR()				{lsim.add(rsim);}
	 |rsim=ELIMINAR()				{lsim.add(rsim);}
	 |rsim=INSERTAR()				{lsim.add(rsim);}
	 |rsim=ACTUALIZAR()				{lsim.add(rsim);}
	 |rsim=BORRAR()					{lsim.add(rsim);}
	 |rsim=SELECCIONAR()<PYCOMA>	{lsim.add(rsim);}
	 |rsim=OTORGAR()   {lsim.add(rsim);}
	 |rsim=DENEGAR()   {lsim.add(rsim);}
	 |lsim=DECLARAR()
	 |rsim=BACKUP()	   {lsim.add(rsim);}
	 |rsim=RESTAURAR() {lsim.add(rsim);}
	 |rsim=LLAMADA_METODO_FUNCION() {lsim.add(rsim);}


         | rsim=ASIGNAR()			 {lsim.add(rsim);}
         | rsim=MIENTRAS()			 {lsim.add(rsim);}
         | rsim=SI()                             {lsim.add(rsim);}
         | rsim=PARA()			         {lsim.add(rsim);}
         | rsim=SELECCIONA()			 {lsim.add(rsim);}

     )
    (lsim2=LISTA_SENTENCIA_GLOBAL())?
	
		{
			for(int i=0; i < lsim2.size(); i++){
				lsim.add(lsim2.get(i));
			}
			return lsim;
		}
}

ArrayList<simbolo> LISTA_SENTENCIA_LOCAL():
{
	ArrayList<simbolo> lsim= new ArrayList<simbolo>();
	ArrayList<simbolo> lsim2= new ArrayList<simbolo>();
	simbolo rsim;
}
{ 
    (
    rsim=RETORNO() 				 {lsim.add(rsim);}
	| rsim=INSERTAR() 			 {lsim.add(rsim);}
	| rsim=ACTUALIZAR() 		 {lsim.add(rsim);}
	| rsim=BORRAR() 			 {lsim.add(rsim);}
	| rsim=SELECCIONAR()<PYCOMA> {lsim.add(rsim);}
	| lsim=DECLARAR()			 
	| rsim=ASIGNAR()			 {lsim.add(rsim);}
	| rsim=SI()					 {lsim.add(rsim);}
	| rsim=SELECCIONA()			 {lsim.add(rsim);}		 
	| rsim=PARA()				 {lsim.add(rsim);}
	| rsim=MIENTRAS()			     {lsim.add(rsim);}
	| rsim=DETENER()				 {lsim.add(rsim);}
	| rsim=LLAMADA_METODO_FUNCION()  {lsim.add(rsim);}
    ) 
    (lsim2=LISTA_SENTENCIA_LOCAL())? 
		
		{
			for(int i=0; i < lsim2.size(); i++){
				lsim.add(lsim2.get(i));
			}
			return lsim;
		}

		
}

simbolo CREAR():
{Token t;
simbolo rsim;}
{
    t=<TOKEN_CREAR> 
    (rsim=CREAR_BD()|rsim=CREAR_TABLA()|rsim=CREAR_OBJETO()|rsim=CREAR_FUNCION()|rsim=CREAR_PROCEDIMIENTO()|rsim=CREAR_USUARIO())
    { 
    return rsim;
    }
}

simbolo CREAR_BD():
{Token nombre, t;}
{
    t=<TOKEN_BASE_DATOS> nombre=<ID> <PYCOMA>
    {        
    EjecucionCreate ec = new EjecucionCreate("CREARBD",nombre.image,"",null,new ambito("CREAR", new ArrayList<simbolo>()));
    return new simbolo( t.beginLine, t.beginColumn,"CREAR","CREAR", "CREAR", new ambito("CREAR", new ArrayList<simbolo>()), ec);
    }
}

simbolo CREAR_TABLA():
{Token nombre, t;
ArrayList<propertyField> lista_pf = new ArrayList<propertyField>();
}
{
    t=<TOKEN_TABLA> nombre=<ID> <PAR_ABRE> lista_pf=LISTA_PARAMETRO_TABLA() <PAR_CIERRA> <PYCOMA>
    {
    EjecucionCreate ec = new EjecucionCreate("CREARTABLA","",nombre.image,lista_pf,new ambito("CREAR", new ArrayList<simbolo>()));
    return new simbolo( t.beginLine, t.beginColumn,"CREAR","CREAR", "CREAR", new ambito("CREAR", new ArrayList<simbolo>()), ec);
    }
}

ArrayList<propertyField> LISTA_PARAMETRO_TABLA():
{
ArrayList<propertyField> retorna_pf = new ArrayList<propertyField>();
ArrayList<propertyField> lista_pf = new ArrayList<propertyField>();
propertyField pf;
}
{
    pf=PARAMETRO_TABLA() (<COMA> lista_pf=LISTA_PARAMETRO_TABLA())?
    {
        retorna_pf.add(pf);
        for(int i=0; i < lista_pf.size(); i++){
                retorna_pf.add(lista_pf.get(i));
        }
        return retorna_pf;
   
    }
}

propertyField PARAMETRO_TABLA():
{String tipoDato;
Token nombre;
}
{
    tipoDato=TIPO_DATO() nombre=<ID> (LISTA_COMPLEMENTO_PARAMETRO_TABLA())?
    {
    propertyField pf = new propertyField(nombre.image, tipoDato, nulo, no_nulo, autoincrementable, llave_primaria, llave_foranea);
    limpiar();
    return pf;
    }
}

void LISTA_COMPLEMENTO_PARAMETRO_TABLA():
{}
{
COMPLEMENTO_PARAMETRO_TABLA() (LISTA_COMPLEMENTO_PARAMETRO_TABLA())?
}

void COMPLEMENTO_PARAMETRO_TABLA():
{Token t;}
{
    <TOKEN_NULO>    {nulo="Y";}
    |<TOKEN_NO_NULO>    {no_nulo="Y";}
    |<TOKEN_AUTOINCREMETABLE>   {autoincrementable="Y";}
    |<TOKEN_LLAVE_PRIMARIA> {llave_primaria="Y";}
    |<TOKEN_LLAVE_FORANEA> t=<ID> {llave_foranea=t.image;}
}


String TIPO_DATO():
{Token t; String ide="";}
{
    <TOKEN_TEXT> {return "CADENA";}
    |<TOKEN_INTEGER> {return "ENTERO";}
    |<TOKEN_DOUBLE> {return "DOUBLE";}
    |<TOKEN_BOOL> {return "BOOL";}
    |<TOKEN_DATE> {return "DATE";}
    |<TOKEN_DATETIME> {return "DATETIME";}
    |t=<ID> {ide=t.image;
             return ide;}
}

simbolo CREAR_OBJETO():
{
    Token nombre,t;
    ArrayList<parametro> para = new ArrayList<parametro>();
}
{
    t=<TOKEN_OBJETO> nombre=<ID> <PAR_ABRE> para=LISTA_PARAMETRO() <PAR_CIERRA> <PYCOMA>
    {
        isMetodo=false;
        EjecucionCreate ec = new EjecucionCreate("CREAROBJETO","",nombre.image,para,new ambito("CREAR", new ArrayList<simbolo>()));
        return new simbolo( t.beginLine, t.beginColumn,"CREAR","CREAR", "CREAR", new ambito("CREAR", new ArrayList<simbolo>()), ec);
    }
}

ArrayList<parametro> LISTA_PARAMETRO():
{
ArrayList<parametro> para = new ArrayList<parametro>();
ArrayList<parametro> lista_para = new ArrayList<parametro>();
Token nombre;
String tipoDato="";
}
{
    tipoDato=TIPO_DATO() nombre=<ID> (<COMA> lista_para=LISTA_PARAMETRO())?
    {
        parametro p= new parametro(nombre.image,tipoDato);
        para.add(p);
        for(int i=0; i < lista_para.size(); i++){
                para.add(lista_para.get(i));
        }
        return para;
    }
}

simbolo CREAR_FUNCION():
{
ArrayList<simbolo> parametros= new ArrayList<simbolo>();
ArrayList<simbolo> lista_simb= new ArrayList<simbolo>();
Token t,t1,nombre;
String tipo;
int posIni=0, posFin=0;
}
{
    t=<TOKEN_FUNCION> nombre=<ID> <PAR_ABRE> (parametros=LISTA_PARAMETRO_PROC_FUN())? <PAR_CIERRA> tipo=TIPO_DATO() <LLAVE_ABRE>  lista_simb=LISTA_SENTENCIA_LOCAL()  t1=<LLAVE_CIERRA>
    {  
       posIni= t.beginColumn - 7;
       posFin= t1.beginColumn;
       ambito ambito = new ambito("METODO", lista_simb);
       for(int i=0; i < lista_simb.size(); i++){
            lista_simb.get(i).ambito.padre= ambito;
	}
       metodo m= new metodo(parametros, ambito,t.beginLine, t.beginColumn, tipo, nombre.image,posIni,posFin);
       return new simbolo(t.beginLine, t.beginColumn,"METODO","METODO","METODO", m.ambito, m);
    }
}

ArrayList<simbolo> LISTA_PARAMETRO_PROC_FUN():
{ArrayList<simbolo> lista_simb = new ArrayList<simbolo>();
ArrayList<simbolo> simb = new ArrayList<simbolo>();
String tipo;
String vab;
Token t;
}
{
     tipo=TIPO_DATO()  t=<VARIABLE> (<COMA> lista_simb=LISTA_PARAMETRO_PROC_FUN())?
     {
		vab= t.image;
		vab= vab.substring(1, vab.length());
		declaracion d= new declaracion(tipo, vab, new ambito("DECLARACION", new ArrayList<simbolo>()) , null, t.beginLine, t.beginColumn);	
		simbolo s= new simbolo(t.beginLine, t.beginColumn,"DECLARACION", "DECLARACION","DECLARACION",d.ambito,d);
                simb.add(s);

                for(int i=0; i < lista_simb.size(); i++){
			simb.add(lista_simb.get(i));
		}
		return simb;
    }
}

simbolo CREAR_PROCEDIMIENTO():
{
    ArrayList<simbolo> parametros= new ArrayList<simbolo>();
    ArrayList<simbolo> lista_simb= new ArrayList<simbolo>();
    Token t,t1,nombre;
    int posIni=0, posFin=0;
}
{
     t=<TOKEN_PROCEDIMIENTO> nombre=<ID> <PAR_ABRE> (parametros=LISTA_PARAMETRO_PROC_FUN())? <PAR_CIERRA> <LLAVE_ABRE> lista_simb=LISTA_SENTENCIA_LOCAL() t1=<LLAVE_CIERRA>
    {
       posIni= t.beginColumn - 7;
       posFin= t1.beginColumn;
       ambito ambito = new ambito("METODO", lista_simb);
       for(int i=0; i < lista_simb.size(); i++){
            lista_simb.get(i).ambito.padre= ambito;
	}
       metodo m= new metodo(parametros, ambito,t.beginLine, t.beginColumn, "PROCEDURE", nombre.image,posIni,posFin);
       return new simbolo(t.beginLine, t.beginColumn,"METODO","METODO","METODO", m.ambito, m);
    }

}

simbolo CREAR_USUARIO():
{Token usuario,contra,t;
String con="";
}
{
    t=<TOKEN_USUARIO> usuario=<ID> <TOKEN_COLOCAR> <TOKEN_PASSWORD> <IGUAL> contra=<CADENA> <PYCOMA>
    {
      con= contra.image;
      con= con.substring(1, con.length()-1);
      EjecucionCreate ec = new EjecucionCreate("CREARUSUARIO",usuario.image,con,null,new ambito("CREAR", new ArrayList<simbolo>()));
      return new simbolo( t.beginLine, t.beginColumn,"CREAR","CREAR", "CREAR", new ambito("CREAR", new ArrayList<simbolo>()), ec);
    }
}

simbolo RETORNO():
{Token t;
expresion exp;}
{
    t=<TOKEN_RETORNO> exp=CONDICION() <PYCOMA>
	{
		return new simbolo(t.beginLine, t.beginColumn,"RETORNAR","RETORNAR","RETORNAR", new ambito("RETORNAR", new ArrayList<simbolo>()), exp);
	}
}

ArrayList<expresion> LISTA_COND():
{ArrayList<expresion> cond = new ArrayList<expresion>();
 ArrayList<expresion> listacond = new ArrayList<expresion>();
 expresion exp;}
{
    exp=CONDICION() (<COMA> listacond=LISTA_COND())?
	{
		cond.add(exp);
		for(int i=0; i < listacond.size(); i++){
			cond.add(listacond.get(i));
		}
		return cond;
	}
}

simbolo USAR_BD():
{Token t;}
{
    <TOKEN_USAR> t=<ID> <PYCOMA>
	{
        return new simbolo(t.beginLine, t.beginColumn,"","USAR_BD","USAR_BD", new ambito("USAR_BD", new ArrayList<simbolo>()), t.image);
        }
}

simbolo ALTERAR():
{simbolo rsim;}
{
    <TOKEN_ALTERAR> (rsim=ALTERAR_TABLA()|rsim=ALTERAR_OBJETO()|rsim=ALTERAR_USUARIO())
	{return rsim;}
}

ArrayList<String> LISTA_ID():
{Token t;
ArrayList<String> id = new ArrayList<String>();
ArrayList<String> lista_id = new ArrayList<String>();
}
{
    t=<ID> (<COMA> lista_id=LISTA_ID())?
    {
        id.add(t.image);
        for(int i=0; i < lista_id.size(); i++){
                id.add(lista_id.get(i));
        }
        return id;
    }
}

simbolo ALTERAR_TABLA():
{
simbolo simb;
Token nombre, t;
ArrayList<propertyField> lista_pf = new ArrayList<propertyField>();
ArrayList<String> lista_id = new ArrayList<String>();
ArrayList<parametro> lista_para = new ArrayList<parametro>();
}
{
    t=<TOKEN_TABLA> nombre=<ID> (<TOKEN_AGREGAR> <PAR_ABRE> lista_pf=LISTA_PARAMETRO_TABLA() <PAR_CIERRA>
    
	{   ambito ambito = new ambito("ALTER", new ArrayList<simbolo>());
		alter alt = new alter("ALTER_TABLE_AGREGAR",nombre.image,"",lista_pf,ambito);
        simb= new simbolo( t.beginLine, t.beginColumn,"ALTER","ALTER", "ALTER", alt.ambito, alt);}
    
	
	|<TOKEN_QUITAR> lista_id=LISTA_ID()
    
	{ 
        for(int i=0; i<lista_id.size(); i++){
            parametro p= new parametro(lista_id.get(i),"");
            lista_para.add(p);
        }
		ambito ambito = new ambito("ALTER", new ArrayList<simbolo>());
        alter alt = new alter("ALTER_TABLE_QUITAR",nombre.image,"",lista_para,ambito);
        simb= new simbolo( t.beginLine, t.beginColumn,"ALTER","ALTER", "ALTER", alt.ambito, alt);
    }
    
	) <PYCOMA> {return simb;}
}

simbolo ALTERAR_OBJETO():
{
simbolo simb;
Token nombre, t;
ArrayList<propertyField> lista_pf = new ArrayList<propertyField>();
ArrayList<String> lista_id = new ArrayList<String>();
ArrayList<parametro> lista_para = new ArrayList<parametro>();}
{
     t=<TOKEN_OBJETO> nombre=<ID> (<TOKEN_AGREGAR> <PAR_ABRE> lista_para=LISTA_PARAMETRO() <PAR_CIERRA>
     {
		ambito ambito = new ambito("ALTER", new ArrayList<simbolo>());
        alter alt = new alter("ALTER_OBJETO_AGREGAR",nombre.image,"",lista_para,ambito);
        simb= new simbolo( t.beginLine, t.beginColumn,"ALTER","ALTER", "ALTER", alt.ambito, alt);
     }
    |<TOKEN_QUITAR> lista_id=LISTA_ID()
    {
        for(int i=0; i<lista_id.size(); i++){
            parametro p= new parametro(lista_id.get(i),"");
            lista_para.add(p);
        }
		ambito ambito = new ambito("ALTER", new ArrayList<simbolo>());
        alter alt = new alter("ALTER_OBJETO_QUITAR",nombre.image,"",lista_para,ambito);
        simb= new simbolo( t.beginLine, t.beginColumn,"ALTER","ALTER", "ALTER", alt.ambito, alt);
    }
) <PYCOMA> {return simb;}
}

simbolo ALTERAR_USUARIO():
{Token t,usr,contra;
String pass;
}
{
    t=<TOKEN_USUARIO> usr=<ID> <TOKEN_CAMBIAR> <TOKEN_PASSWORD> <IGUAL> contra=<CADENA> <PYCOMA>
    {
     pass= contra.image;
     pass= pass.substring(1, pass.length()-1);
	 ambito ambito = new ambito("ALTER", new ArrayList<simbolo>());
     alter alt = new alter("ALTER_USUARIO",usr.image,pass,null,ambito);
     return new simbolo( t.beginLine, t.beginColumn,"ALTER","ALTER", "ALTER", alt.ambito, alt);
    }
}

simbolo ELIMINAR():
{String tipo=""; Token nombre,t;}
{
    t=<TOKEN_ELIMINAR> (<TOKEN_TABLA> {tipo="TABLE";} | <TOKEN_BASE_DATOS> {tipo="BD";}  | <TOKEN_OBJETO> {tipo="OBJECT";} | <TOKEN_USUARIO> {tipo="USER";}) nombre=<ID> <PYCOMA>
		{
			ambito ambito = new ambito("ELIMINAR", new ArrayList<simbolo>());
            eliminar el = new eliminar(tipo,nombre.image,ambito);
            return new simbolo( t.beginLine, t.beginColumn,"ELIMINAR","ELIMINAR", "ELIMINAR", el.ambito, el);
        }
}

simbolo INSERTAR():
{
ArrayList<String> lista_id = null;
ArrayList<expresion> lista_exp = null;
Token t,l;
}
{
    l=<TOKEN_INSERTAR> <TOKEN_TABLA> t=<ID> <PAR_ABRE> (lista_id=LISTA_ID() <PAR_CIERRA> <TOKEN_VALORES> <PAR_ABRE>)? lista_exp=LISTA_COND() <PAR_CIERRA> <PYCOMA>
    {
    ambito ambito = new ambito("INSERT", new ArrayList<simbolo>());
    insert ins= new insert(t.image, lista_id, lista_exp,ambito);
    return new simbolo(l.beginLine, l.beginColumn,"INSERT", "INSERT","INSERT",ins.ambito,ins);
    }
}

simbolo  ACTUALIZAR():
{}
{
    <TOKEN_ACTUALIZAR> <TOKEN_TABLA> <ID> <PAR_ABRE> LISTA_ID() <PAR_CIERRA> <TOKEN_VALORES> <PAR_ABRE> LISTA_COND() <PAR_CIERRA> (<TOKEN_DONDE> CONDICION())? <PYCOMA>
	{return null;}
}

simbolo BORRAR():
{}
{
    <TOKEN_BORRAR> <TOKEN_TABLA> <ID> (<TOKEN_DONDE> CONDICION())? <PYCOMA>
	{return null;}
}

simbolo SELECCIONAR():
{
    ArrayList<llamadaTabla> lista_columna =new ArrayList<llamadaTabla>();
    boolean todaColumna = false;
    ArrayList<String> lista_tabla =new ArrayList<String>();
    expresion  expresion=null;
    boolean tieneOrdenar= false;
    ArrayList<llamadaTabla> tabla_ordenar= new ArrayList<llamadaTabla>();
    String tipo_ordenar="";
    int fila=0;
    int col=0;
    ambito ambito=null;
    Token t=null,tipo=null;
}
{
        t=<TOKEN_SELECCIONAR> (lista_columna=LLAMADA_TABLA() | <POR> {todaColumna=true;})
       <TOKEN_DE> lista_tabla=LISTA_ID() (<TOKEN_DONDE> expresion=CONDICION())? (<TOKEN_ORDENAR> tabla_ordenar=LLAMADA_TABLA() (tipo=<TOKEN_ASC>|tipo=<TOKEN_DESC>) {tieneOrdenar=true;})? 
	
        {
        ambito = new ambito("SELECT", new ArrayList<simbolo>());
        if(tipo==null){tipo_ordenar="";}
        else{tipo_ordenar=tipo.image;}
        select selec = new select(lista_columna,todaColumna,lista_tabla,expresion,tieneOrdenar,tabla_ordenar,tipo_ordenar, t.beginLine, t.beginColumn, ambito);
        return new simbolo( t.beginLine, t.beginColumn,"SELECT","SELECT", "SELECT", selec.ambito, selec);
        }
}

ArrayList<llamadaTabla> LLAMADA_TABLA():
{Token n1=null, n2=null, n3=null;
 llamadaTabla llaTab=null;
 ArrayList<llamadaTabla> id = new ArrayList<llamadaTabla>();
 ArrayList<llamadaTabla> lista_id = new ArrayList<llamadaTabla>();
}
{
    n1=<ID> ((<PUNTO> n2=<ID>)(<PUNTO> n3=<ID>)?)? (<COMA> lista_id=LLAMADA_TABLA())?
	{
	if(n2==null && n3==null){
	llaTab = new llamadaTabla("", n1.image, "", n1.beginLine, n1.beginColumn);}
	else if(n2!=null && n3==null){
	llaTab = new llamadaTabla(n1.image, n2.image, "" , n1.beginLine, n1.beginColumn);}
	else if (n3!=null && n2!=null){
	llaTab = new llamadaTabla(n1.image, n2.image, n3.image, n1.beginLine, n1.beginColumn);	
	}	
	
	id.add(llaTab);
        for(int i=0; i < lista_id.size(); i++){
                id.add(lista_id.get(i));
        }
        return id;
	
	}
}


simbolo OTORGAR():
{}
{
     <TOKEN_OTORGAR> <ID> <ID> <PUNTO> (<POR> | <ID>) <PYCOMA>
	 {return null;}
}

simbolo DENEGAR():
{}
{
      <TOKEN_DENEGAR> <ID> <ID> <PUNTO> (<POR> | <ID>) <PYCOMA>
	  {return null;}
}

ArrayList<simbolo> DECLARAR():
{ArrayList<declaracion> decla = new ArrayList<declaracion>();
ArrayList<simbolo> simb = new ArrayList<simbolo>();
String tipo;
expresion exp=null;
Token t;
Token d;
}
{
        d=<TOKEN_DECLARAR> decla=LISTA_VARIABLE() ((tipo=TIPO_DATO_DECLARAR() (<IGUAL> exp=CONDICION())?
		{
			for(int i=0; i < decla.size(); i++){
				decla.get(i).tipo=tipo;
				decla.get(i).valor=exp;
				simb.add(new simbolo(d.beginLine, d.beginColumn,"DECLARACION", "DECLARACION","DECLARACION",decla.get(i).ambito,decla.get(i)));
			}
		}
		
		)| t=<ID>
			{
                                for(int i=0; i < decla.size(); i++){
				decla.get(i).tipo=t.image;
				decla.get(i).valor=null;
				simb.add(new simbolo(d.beginLine, d.beginColumn,"DECLARACION", "DECLARACION","DECLARACION",decla.get(i).ambito,decla.get(i)));
                                }
			}	
		) <PYCOMA>
		{return simb;}
		
		
}

ArrayList<declaracion> LISTA_VARIABLE():
{ArrayList<declaracion> decla = new ArrayList<declaracion>();
ArrayList<declaracion>  lista_decla = new ArrayList<declaracion>();
Token t;
String vab;
}
{
        t=<VARIABLE> (<COMA> lista_decla=LISTA_VARIABLE())?
	   	{
		vab= t.image;
		vab= vab.substring(1, vab.length());
		declaracion d= new declaracion("", vab, new ambito("DECLARACION", new ArrayList<simbolo>()) , null, t.beginLine, t.beginColumn);	
		decla.add(d);
		for(int i=0; i < lista_decla.size(); i++){
			decla.add(lista_decla.get(i));
		}
		return decla;
	}
}

String TIPO_DATO_DECLARAR():
{}
{
    <TOKEN_TEXT>	{return "CADENA";}
    |<TOKEN_INTEGER> {return "ENTERO";}
    |<TOKEN_DOUBLE> {return "DOUBLE";}
    |<TOKEN_BOOL> {return "BOOL";}
    |<TOKEN_DATE> {return "DATE";}
    |<TOKEN_DATETIME> {return "DATETIME";}
}

simbolo ASIGNAR():
{
	Token n1=null, n2=null;
	String vab;
	llamadaVariable llaVa;
	expresion exp;
}
{
    n1=<VARIABLE>(<PUNTO> n2=<ID>)? <IGUAL> exp=CONDICION() <PYCOMA>
					{
							if (n2!=null){
								vab= n1.image;
								vab= vab.substring(1, vab.length());
								llaVa = new llamadaVariable(vab,n2.image,n1.beginLine, n1.beginColumn);
							}
							else {
								vab= n1.image;
								vab= vab.substring(1, vab.length());
								llaVa = new llamadaVariable(vab,"",n1.beginLine, n1.beginColumn);
							}
							
							asignacion asi= new asignacion(llaVa,new ambito("ASIGNACION", new ArrayList<simbolo>()),exp);
							return new simbolo(n1.beginLine, n1.beginColumn,"ASIGNACION", "ASIGNACION","ASIGNACION",asi.ambito,asi);
					}
}

simbolo SI():
{expresion exp;
ArrayList<simbolo> lsi= new ArrayList<simbolo>();
ArrayList<simbolo> lsino= new ArrayList<simbolo>();
Token t;
}
{
  t=<TOKEN_SI> <PAR_ABRE> exp=CONDICION() <PAR_CIERRA> <LLAVE_ABRE> lsi=LISTA_SENTENCIA_LOCAL() <LLAVE_CIERRA> (<TOKEN_SINO> <LLAVE_ABRE> lsino=LISTA_SENTENCIA_LOCAL() <LLAVE_CIERRA>)?
  {
	ambito si = new ambito("SI",lsi);
	ambito sino = new ambito("SINO", lsino);
	ambito ambito= new ambito("SI", new ArrayList<simbolo>());
	
	for(int i=0; i < lsi.size(); i++){
		lsi.get(i).ambito.padre= si;
	}
	for(int i=0; i < lsino.size(); i++){
		lsino.get(i).ambito.padre= sino;
	}
	
	si s = new si(exp, si, sino, ambito);  
	return new simbolo(t.beginLine, t.beginColumn,"SI", "SI","SI",s.ambito,s);
  }
}

simbolo SELECCIONA():
{Token t; 
expresion exp; 
ArrayList<caso> lista_caso = new ArrayList<caso>(); 
caso def= null;}
{
    t=<TOKEN_SELECCIONA> <PAR_ABRE> exp=CONDICION() <PAR_CIERRA> <LLAVE_ABRE> lista_caso=LISTA_CASO() (def=DEFECTO())? <LLAVE_CIERRA>	
	 {
        ambito ambito = new ambito("SELECCIONA", new ArrayList<simbolo>());
        for(caso ca: lista_caso){
            for(simbolo sim: ca.ambito.tablaSimbolo){
                sim.ambito.padre = ambito;
            }
        }
		
        for(simbolo sim: def.ambito.tablaSimbolo){
                sim.ambito.padre = ambito;
        }
		
        selecciona sele = new selecciona(exp,lista_caso,def,ambito);
        return new simbolo(t.beginLine, t.beginColumn,"SELECCIONA", "SELECCIONA","SELECCIONA",sele.ambito,sele);
	 }	
}

ArrayList<caso> LISTA_CASO():
{Token t; 
expresion exp; 
ArrayList<simbolo> lista_simb = new ArrayList<simbolo>(); 
ArrayList<caso> lcaso = new ArrayList<caso>();
ArrayList<caso> lista_caso = new ArrayList<caso>();}
{
    t=<TOKEN_CASO> exp=VALOR_CASO() <DOSPUNTOS> lista_simb=LISTA_SENTENCIA_LOCAL() (lista_caso=LISTA_CASO())? 
	{
        ambito ambito = new ambito("CASO", lista_simb);		
		for(int i=0; i < lista_simb.size(); i++){
			lista_simb.get(i).ambito.padre= ambito;
		}	
		
        caso ca = new caso(exp, ambito);
        lcaso.add(ca);		
		for(int i=0; i < lista_caso.size(); i++){
			lcaso.add(lista_caso.get(i));
		}
		
        return lcaso;        
    }
}

expresion VALOR_CASO():
{Token t;}
{
    t=<CADENA> {return new expresion(null, null, "CADENA", "CADENA", t.beginLine, t.beginColumn, t.image.substring(1, t.image.length()-1));}
    |t=<ENTERO> {return new expresion(null, null, "ENTERO", "ENTERO", t.beginLine, t.beginColumn,t.image);}
    |t=<DECIMAL> {return new expresion(null, null, "DOUBLE", "DOUBLE", t.beginLine, t.beginColumn,t.image);}
}

caso DEFECTO():
{ArrayList<simbolo> lista_simb = new ArrayList<simbolo>();}
{
    <TOKEN_DEFECTO> <DOSPUNTOS> lista_simb=LISTA_SENTENCIA_LOCAL()
	{
        ambito ambito = new ambito("CASO", lista_simb);
 		for(int i=0; i < lista_simb.size(); i++){
			lista_simb.get(i).ambito.padre= ambito;
		}	
        return new caso(null, ambito);      
    }
}

simbolo PARA():
{Token tv, tp, to;
String vab;
expresion exp1,exp2;
ArrayList<simbolo> lista_simb= new ArrayList<simbolo>();}
{
    tp=<TOKEN_PARA> <PAR_ABRE> <TOKEN_DECLARAR> tv=<VARIABLE> <TOKEN_INTEGER> <IGUAL> exp1=CONDICION()
    <PYCOMA> exp2=CONDICION() <PYCOMA> 
    (to=<AUMENTO>|to=<DECREMENTO>) <PAR_CIERRA> 
    <LLAVE_ABRE> lista_simb=LISTA_SENTENCIA_LOCAL() <LLAVE_CIERRA>
	{
	    vab= tv.image;
	    vab= vab.substring(1, vab.length());
	    declaracion decla = new declaracion("ENTERO", vab, new ambito("DECLARACION", new ArrayList<simbolo>()), exp1, tp.beginLine, tp.beginColumn); 
            simbolo simb_decla = new simbolo( tp.beginLine, tp.beginColumn,"DECLARACION", "DECLARACION", "DECLARACION", new ambito("DECLARACION", new ArrayList<simbolo>()), decla);
       
	    ambito ambito = new ambito("PARA", lista_simb);
 
		for(int i=0; i < lista_simb.size(); i++){
			lista_simb.get(i).ambito.padre= ambito;
		}
		
        para pa = new para(simb_decla,to.image,exp2,ambito);
        return new simbolo( tp.beginLine, tp.beginColumn,"PARA","PARA", "PARA", pa.ambito, pa);
	}
}


simbolo MIENTRAS():
{
	ArrayList<simbolo> lista_simb= new ArrayList<simbolo>(); 
	expresion exp; 
	Token t;
}
{
    t=<TOKEN_MIENTRAS> <PAR_ABRE> exp=CONDICION() <PAR_CIERRA> <LLAVE_ABRE> lista_simb=LISTA_SENTENCIA_LOCAL() <LLAVE_CIERRA>
	{
		ambito ambito = new ambito("MIENTRAS", lista_simb);
        
		for(int i=0; i < lista_simb.size(); i++){
				lista_simb.get(i).ambito.padre= ambito;
		}
		
        mientras mien = new mientras(ambito,exp);
        return new simbolo(t.beginLine, t.beginColumn,"MIENTRAS","MIENTRAS","MIENTRAS", mien.ambito, mien);
	}
}

simbolo DETENER():
{Token t;}
{
    t=<TOKEN_DETENER><PYCOMA>
	{
	return new simbolo(t.beginLine, t.beginColumn,"","DETENER","DETENER", new ambito("DETENER", new ArrayList<simbolo>()), null);
	}
}

void FUNCIONES_PROPIAS_DEL_LENGUAJE():
{}
{
     <TOKEN_FECHA> <PAR_ABRE> <PAR_CIERRA>
    |<TOKEN_FECHA_HORA> <PAR_ABRE> <PAR_CIERRA>
    |<TOKEN_CONTAR> <PAR_ABRE> <MENOR_2> SELECCIONAR() <MAYOR_2> <PAR_CIERRA>
}

simbolo BACKUP():
{Token bd, nombre;
int op=0;
simbolo simb=null;
}
{
    (<TOKEN_BACKUP_USQL> {op=1;} | <TOKEN_BACKUP_COMPLETO> {op=2;}) bd=<ID> nombre=<ID> <PYCOMA>
    {
        if (op==1){
            ambito ambito = new ambito("BACKUP", new ArrayList<simbolo>());
            backup back = new backup("BACKUP_USQLDUMP",bd.image,nombre.image,ambito);
            simb= new simbolo( bd.beginLine, bd.beginColumn,"BACKUP","BACKUP", "BACKUP", back.ambito, back);
        }
        else{simb=null;}
        return simb;
    }
}

simbolo RESTAURAR():
{Token bd;
String path="";
int op=0;
simbolo simb=null;
}
{
    (<TOKEN_RESTAURAR_USQL> {op=1;} | <TOKEN_RESTAURAR_COMPLETO>  {op=2;}) bd=<CADENA> <PYCOMA>
        {
        if (op==1){
            path= bd.image;
            path= path.substring(1, path.length()-1);
            ambito ambito = new ambito("BACKUP", new ArrayList<simbolo>());
            backup back = new backup("RESTAURAR_USQLDUMP","",path,ambito);
            simb= new simbolo( bd.beginLine, bd.beginColumn,"BACKUP","BACKUP", "BACKUP", back.ambito, back);
        }
        else{simb= null;}
        return simb;
        }
        
}

expresion CONDICION():
{expresion nodoizq, nododer, nodo=null;
Token t;}
{
    nodoizq=COND_AND() (t=<OR> nododer=COND_AND()
	{nodo= new expresion(nodoizq, nododer, t.image, t.image, t.beginLine, t.beginColumn, null);})* 
	{if(nodo == null){
		return nodoizq;
	}else{
		return nodo;
	}}
}

expresion COND_AND():
{expresion nodoizq, nododer,nodo=null;
Token t;}
{
    nodoizq=COND_NOT() (t=<AND> nododer=COND_NOT()
	{nodo=new expresion(nodoizq, nododer, t.image, t.image, t.beginLine, t.beginColumn, null);})* 
	{if(nodo == null){
		return nodoizq;
	}else{
		return nodo;
	}}
}

expresion COND_NOT():
{expresion nododer; 
 Token t=null;}
{ 
    (t=<NOT>)? nododer=REL()
    {
        if (t == null){ return nododer;}
        else    {return new expresion(null, nododer, t.image, t.image, t.beginLine, t.beginColumn, null);}
    }
}

expresion REL():
{expresion nodoizq, nododer,nodo=null;
Token t;}
{
   nodoizq=EXP() ((t=<IGUALACION> | t=<DIFERENTE> | t=<MAYOR> | t=<MENOR> | t=<MAYORIGUAL> | t=<MENORIGUAL>)  nododer=EXP()
   {nodo= new expresion(nodoizq, nododer, t.image, t.image, t.beginLine, t.beginColumn, null);})*
	{if(nodo == null){
		return nodoizq;
	}else{
		return nodo;
	}}
}

expresion EXP():
{expresion nodoizq, nododer,nodo=null;
 Token t;}
{
  nodoizq=F() ((t=<MAS>|t=<MENOS>) nododer=F() 
  {nodo= new expresion(nodoizq, nododer, t.image, t.image, t.beginLine, t.beginColumn, null);})*
	{if(nodo == null){
		return nodoizq;
	}else{
		return nodo;
	}}
}

expresion F():
{expresion nodoizq, nododer,nodo=null;
 Token t;}
{
 nodoizq=U() ((t=<POR>|t=<DIVISION>) nododer=U() 
 {nodo= new expresion(nodoizq, nododer, t.image, t.image, t.beginLine, t.beginColumn, null);})* 
	{if(nodo == null){
		return nodoizq;
	}else{
		return nodo;
	}}
}

expresion U():
{expresion nododer; 
 Token t=null;
}
{
    (t=<MENOS>)? nododer=E() 
    {
        if (t == null){ return nododer;}
        else    {return new expresion(null, nododer, t.image, t.image, t.beginLine, t.beginColumn, null);}
    }
}

expresion E():
{expresion nodoizq, nododer,nodo=null;
 Token t;
}
{
 nodoizq=H() 
 (t=<POTENCIA> nododer=H() 
 {nodo= new expresion(nodoizq, nododer, t.image,  t.image, t.beginLine, t.beginColumn, null);})* 
 	{if(nodo == null){
		return nodoizq;
	}else{
		return nodo;
	}}
}

expresion H():
{Token t, n1=null, n2=null;
 String vab1,vab2;
 llamadaVariable llaVa;
 expresion exp;
}
{
n1=<VARIABLE>(<PUNTO>n2=<ID>)? 	{			
									if (n2!=null){
										vab1= n1.image;
										vab1= vab1.substring(1, vab1.length());
										llaVa = new llamadaVariable(vab1,n2.image,n1.beginLine, n1.beginColumn);
									}
									else {
                                        vab1= n1.image;
										vab1= vab1.substring(1, vab1.length());
										llaVa = new llamadaVariable(vab1,"",n1.beginLine, n1.beginColumn);
									}
									return new expresion(null, null, "VARIABLE", "VARIABLE", n1.beginLine, n1.beginColumn, llaVa);
									
								}
|exp=LLAMADA_METODO_OBJETO() {return exp;}
|FUNCIONES_PROPIAS_DEL_LENGUAJE()
|t=<ENTERO> {return new expresion(null, null, "ENTERO", "ENTERO", t.beginLine, t.beginColumn,t.image);}
|t=<CADENA> {return new expresion(null, null, "CADENA", "CADENA", t.beginLine, t.beginColumn, t.image.substring(1, t.image.length()-1));}
|t=<DECIMAL> {return new expresion(null, null, "DOUBLE", "DOUBLE", t.beginLine, t.beginColumn,t.image);}
|t=<DATE>    {return new expresion(null, null, "DATE", "DATE", t.beginLine, t.beginColumn,t.image);}
|t=<DATETIME> {return new expresion(null, null, "DATETIME", "DATETIME", t.beginLine, t.beginColumn,t.image);}
|t=<TOKEN_FALSO> {return new expresion(null, null, "BOOL", "BOOL", t.beginLine, t.beginColumn,t.image);}
|t=<TOKEN_VERDADERO>  {return new expresion(null, null, "BOOL", "BOOL", t.beginLine, t.beginColumn,t.image);}
|<PAR_ABRE> exp=CONDICION() <PAR_CIERRA> {return exp;}
}

expresion LLAMADA_METODO_OBJETO():
{Token n1=null, n2=null, n3=null;
 ArrayList<expresion> exp = new ArrayList<expresion>();
 llamadaTabla llaTab;
 llamadaMetodo llaMe;
 }
{
    n1=<ID> ((<PAR_ABRE> (exp=LISTA_COND())? <PAR_CIERRA>	
	{llaMe = new llamadaMetodo(n1.image,exp,n1.beginLine, n1.beginColumn);
	return new expresion(null, null, "LLAMADA_METODO", "LLAMADA_METODO", n1.beginLine, n1.beginColumn, llaMe);}
	)  
		
	| (<PUNTO> n2=<ID>)
	{llaTab = new llamadaTabla(n1.image, n2.image, "" , n1.beginLine, n1.beginColumn);
	return new expresion(null, null, "TABLA", "TABLA", n1.beginLine, n1.beginColumn, llaTab);}	

	(<PUNTO> n3=<ID> 	
	
	{llaTab = new llamadaTabla(n1.image, n2.image, n3.image, n1.beginLine, n1.beginColumn);
	return new expresion(null, null, "TABLA", "TABLA", n1.beginLine, n1.beginColumn, llaTab);}	
	
	)?)? 
	
	{llaTab = new llamadaTabla("", n1.image, "", n1.beginLine, n1.beginColumn);
	return new expresion(null, null, "TABLA", "TABLA", n1.beginLine, n1.beginColumn, llaTab);}
}

simbolo LLAMADA_METODO_FUNCION():
{
Token t;
ArrayList<expresion> lexp= new ArrayList<expresion>();
expresion exp=null;
}
{
     t=<ID> <PAR_ABRE> (lexp=LISTA_COND())? <PAR_CIERRA> <PYCOMA>{
																	llamadaMetodo llaMe = new llamadaMetodo(t.image,lexp,t.beginLine, t.beginColumn);
																	return new simbolo(t.beginLine, t.beginColumn,"LLAMADA_METODO","LLAMADA_METODO","LLAMADA_METODO", new ambito("LLAMADA_METODO", new ArrayList<simbolo>()), llaMe);
																	}
    |t=<TOKEN_IMPRIMIR> <PAR_ABRE> (exp=CONDICION())? <PAR_CIERRA> <PYCOMA> {imprimir imp = new imprimir(exp,new ambito("IMPRIMIR", new ArrayList<simbolo>()));
																			return new simbolo(t.beginLine, t.beginColumn,"IMPRIMIR","IMPRIMIR","IMPRIMIR", new ambito("IMPRIMIR", new ArrayList<simbolo>()), imp);																			} 
}