options {
IGNORE_CASE = true;
STATIC = false;
    OUTPUTOKEN_DIRECTORY="C://Users//anick//Documents//NetBeansProjects//[Compi2]Proyecto1_201212859//FISQL//src//xml//db//";
}

PARSER_BEGIN(db)
package xml.db;
import java.util.ArrayList;
import archivos.*;
import archivos.db.*;
import archivos.metodo.function;
import archivos.metodo.procedure;
import archivos.objeto.object;
import archivos.tabla.fila_tabla;
import archivos.tabla.fila_tabla_objeto;
import archivos.tabla.table;

public class db {
  private String tipo,nombre,path,nombre_param;
  private String nulo, no_nulo, autoincrementable, llave_primaria, llave_foranea;
  ArrayList<table> lt = new ArrayList<table>();
  private ArrayList<database> ldb= new ArrayList<database>();

  public static void main(String args[]) throws ParseException {
    db parser = new db(System.in);
    parser.S();
  }
}
PARSER_END(db)

TOKEN:
{   
   <TOKEN_PROCEDURE_ABRE: ("<procedure>")> {System.out.println(image);}
  |<TOKEN_PROCEDURE_CIERRA: ("</procedure>")> {System.out.println(image);}
  |<TOKEN_PATH_ABRE: ("<path>")> {System.out.println(image);}
  |<TOKEN_PATH_CIERRA: ("</path>")> {System.out.println(image);}
  |<TOKEN_NOMBRE_ABRE: ("<nombre>")> {System.out.println(image);}
  |<TOKEN_NOMBRE_CIERRA: ("</nombre>")> {System.out.println(image);}
  |<TOKEN_OBJECT_ABRE: ("<object>")> {System.out.println(image);}
  |<TOKEN_OBJECT_CIERRA: ("</object>")> {System.out.println(image);}
  |<TOKEN_ROWS_ABRE: ("<rows>")> {System.out.println(image);}
  |<TOKEN_ROWS_CIERRA: ("</rows>")> {System.out.println(image);}
  |<TOKEN_TEXT_ABRE: ("<text>")> {System.out.println(image);}
  |<TOKEN_TEXT_CIERRA: ("</text>")> {System.out.println(image);}
  |<TOKEN_INTEGER_ABRE: ("<integer>")> {System.out.println(image);}
  |<TOKEN_INTEGER_CIERRA: ("</integer>")> {System.out.println(image);}
  |<TOKEN_DOUBLE_ABRE: ("<double>")> {System.out.println(image);}
  |<TOKEN_DOUBLE_CIERRA: ("</double>")> {System.out.println(image);}
  |<TOKEN_BOOL_ABRE: ("<bool>")> {System.out.println(image);}
  |<TOKEN_BOOL_CIERRA: ("</bool>")> {System.out.println(image);}
  |<TOKEN_DATE_ABRE: ("<date>")> {System.out.println(image);}
  |<TOKEN_DATE_CIERRA: ("</date>")> {System.out.println(image);}
  |<TOKEN_DATETIME_ABRE: ("<datetime>")> {System.out.println(image);}
  |<TOKEN_DATETIME_CIERRA: ("</datetime>")> {System.out.println(image);}
  |<TOKEN_TABLE_ABRE: ("<table>")> {System.out.println(image);}
  |<TOKEN_TABLE_CIERRA: ("</table>")> {System.out.println(image);}
  |<TOKEN_FUNCTION_ABRE: ("<function>")> {System.out.println(image);}
  |<TOKEN_FUNCTION_CIERRA: ("</function>")> {System.out.println(image);}
  |<TOKEN_FIELD_ABRE: ("<field>")> {System.out.println(image);}
  |<TOKEN_FIELD_CIERRA: ("</field>")> {System.out.println(image);}
  |<TOKEN_PROPERTY_ABRE: ("<property>")> {System.out.println(image);}
  |<TOKEN_PROPERTY_CIERRA: ("</property>")> {System.out.println(image);}
  |<TOKEN_NULO_ABRE: ("<nulo>")> {System.out.println(image);}
  |<TOKEN_NULO_CIERRA: ("</nulo>")> {System.out.println(image);}
  |<TOKEN_NO_NULO_ABRE: ("<no_nulo>")> {System.out.println(image);}
  |<TOKEN_NO_NULO_CIERRA: ("</no_nulo>")> {System.out.println(image);}
  |<TOKEN_AUTOINCREMENTABLE_ABRE: ("<autoincrementable>")> {System.out.println(image);}
  |<TOKEN_AUTOINCREMENTABLE_CIERRA: ("</autoincrementable>")> {System.out.println(image);}
  |<TOKEN_LLAVE_PRIMARIA_ABRE: ("<llave_primaria>")> {System.out.println(image);}
  |<TOKEN_LLAVE_PRIMARIA_CIERRA: ("</llave_primaria>")> {System.out.println(image);}
  |<TOKEN_LLAVE_FORANEA_ABRE: ("<llave_foranea>")> {System.out.println(image);}
  |<TOKEN_LLAVE_FORANEA_CIERRA: ("</llave_foranea>")> {System.out.println(image);}
  |<TOKEN_Y:("\""("Y")"\"")> {System.out.println(image);}
  |<TOKEN_N:("\""("N")"\"")> {System.out.println(image);}



  |<TOKEN_ID_ABRE: ("<")(["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* (">")> {System.out.println(image);}
  |<TOKEN_ID_CIERRA: ("</")(["a"-"z","A"-"Z"])(["a"-"z","A"-"Z","0"-"9","_"])* (">")> {System.out.println(image);}
  

  |<CADENA:"\"" (~["\""])*"\""> {System.out.println(image);}
}

SKIP: 
{
  " "
| "\n"
| "\r"
| "\t"
}

ArrayList<database> S():
{}
{
   LISTA_REGISTRO() {return ldb;}
}

void LISTA_REGISTRO():
{}
{
    (PROCEDURE() | FUNCTION()| OBJECT() | TABLE()) (LISTA_REGISTRO())?
}


void PROCEDURE():
{Token p;}
{
     <TOKEN_PROCEDURE_ABRE>
     <TOKEN_PATH_ABRE> p=<CADENA> <TOKEN_PATH_CIERRA>
     <TOKEN_PROCEDURE_CIERRA>
     {
     path= p.image;
     path= path.substring(1, path.length()-1);
     ArrayList<procedure> proc= new ArrayList<procedure>();
     database data = new database("PROCEDURE",null,path,null,proc,null,null);
     ldb.add(data);
     }

}

void FUNCTION():
{Token p;}
{
     <TOKEN_FUNCTION_ABRE>
     <TOKEN_PATH_ABRE> p=<CADENA> <TOKEN_PATH_CIERRA>
     <TOKEN_FUNCTION_CIERRA>
     {
     path= p.image;
     path= path.substring(1, path.length()-1);
     ArrayList<function> func = new ArrayList<function>();
     database data = new database("FUNCTION",null,path,func,null,null,null);
     ldb.add(data);
     }

}

void OBJECT():
{Token p;}
{
     <TOKEN_OBJECT_ABRE>
     <TOKEN_PATH_ABRE> p=<CADENA> <TOKEN_PATH_CIERRA>
     <TOKEN_OBJECT_CIERRA>
     {
     path= p.image;
     path= path.substring(1, path.length()-1);
     ArrayList<object> obj = new ArrayList<object>();
     database data = new database("OBJECT",null,path,null,null,obj,null);
     ldb.add(data);
     }
}

void TABLE():
{Token n,p;}
{
     <TOKEN_TABLE_ABRE>
     <TOKEN_NOMBRE_ABRE> n=<CADENA> <TOKEN_NOMBRE_CIERRA>
     <TOKEN_PATH_ABRE> p=<CADENA> <TOKEN_PATH_CIERRA>
     <TOKEN_ROWS_ABRE> LISTA_TIPO() <TOKEN_ROWS_CIERRA>
     <TOKEN_TABLE_CIERRA>
    {
        nombre= n.image;
        nombre= nombre.substring(1, nombre.length()-1);
        path= p.image;
        path= path.substring(1, path.length()-1);
        database data = new database("TABLE",nombre,path,null,null,null,lt);
        ldb.add(data);
        lt = new ArrayList<table>();
    }

}

void LISTA_TIPO():
{}
{
   (<TOKEN_FIELD_ABRE> TIPO() <TOKEN_FIELD_CIERRA>) (LISTA_TIPO())?
}

void TIPO():
{Token t,tip,f;}
{
   
    <TOKEN_INTEGER_ABRE> t=<CADENA> <TOKEN_INTEGER_CIERRA>
        <TOKEN_PROPERTY_ABRE> 
			<TOKEN_NULO_ABRE> (<TOKEN_Y> {nulo="Y";}|<TOKEN_N> {nulo="N";}) <TOKEN_NULO_CIERRA> 
			<TOKEN_NO_NULO_ABRE> (<TOKEN_Y> {no_nulo="Y";}|<TOKEN_N> {no_nulo="N";}) <TOKEN_NO_NULO_CIERRA> 
			<TOKEN_AUTOINCREMENTABLE_ABRE> (<TOKEN_Y> {autoincrementable="Y";}|<TOKEN_N> {autoincrementable="N";}) <TOKEN_AUTOINCREMENTABLE_CIERRA> 
			<TOKEN_LLAVE_PRIMARIA_ABRE> (<TOKEN_Y> {llave_primaria="Y";}|<TOKEN_N> {llave_primaria="N";}) <TOKEN_LLAVE_PRIMARIA_CIERRA> 
			<TOKEN_LLAVE_FORANEA_ABRE> (f=<CADENA>{
														llave_foranea= f.image;
														llave_foranea= llave_foranea.substring(1, llave_foranea.length()-1);
													  }|<TOKEN_N> {llave_foranea="N";}) <TOKEN_LLAVE_FORANEA_CIERRA> 
        <TOKEN_PROPERTY_CIERRA> 
   
                                                            
                                                             

                                                            {
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                ArrayList<fila_tabla> registro = new ArrayList<fila_tabla>();
                                                                table ta= new table(nombre_param,"INTEGER",nulo,no_nulo,autoincrementable,llave_primaria,llave_foranea,registro,false,null);
                                                                lt.add(ta);
                                                            }														
    |<TOKEN_TEXT_ABRE> t=<CADENA> <TOKEN_TEXT_CIERRA>
        <TOKEN_PROPERTY_ABRE> 
			<TOKEN_NULO_ABRE> (<TOKEN_Y> {nulo="Y";}|<TOKEN_N> {nulo="N";}) <TOKEN_NULO_CIERRA> 
			<TOKEN_NO_NULO_ABRE> (<TOKEN_Y> {no_nulo="Y";}|<TOKEN_N> {no_nulo="N";}) <TOKEN_NO_NULO_CIERRA> 
			<TOKEN_AUTOINCREMENTABLE_ABRE> (<TOKEN_Y> {autoincrementable="Y";}|<TOKEN_N> {autoincrementable="N";}) <TOKEN_AUTOINCREMENTABLE_CIERRA> 
			<TOKEN_LLAVE_PRIMARIA_ABRE> (<TOKEN_Y> {llave_primaria="Y";}|<TOKEN_N> {llave_primaria="N";}) <TOKEN_LLAVE_PRIMARIA_CIERRA> 
			<TOKEN_LLAVE_FORANEA_ABRE> (f=<CADENA>{
														llave_foranea= f.image;
														llave_foranea= llave_foranea.substring(1, llave_foranea.length()-1);
													  }|<TOKEN_N> {llave_foranea="N";}) <TOKEN_LLAVE_FORANEA_CIERRA> 
        <TOKEN_PROPERTY_CIERRA> 
 
                                                            {
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                ArrayList<fila_tabla> registro = new ArrayList<fila_tabla>();
                                                                table ta= new table(nombre_param,"TEXT",nulo,no_nulo,autoincrementable,llave_primaria,llave_foranea,registro,false,null);
                                                                lt.add(ta);                                                           
                                                            }
    |<TOKEN_DOUBLE_ABRE> t=<CADENA> <TOKEN_DOUBLE_CIERRA>
	<TOKEN_PROPERTY_ABRE> 
			<TOKEN_NULO_ABRE> (<TOKEN_Y> {nulo="Y";}|<TOKEN_N> {nulo="N";}) <TOKEN_NULO_CIERRA> 
			<TOKEN_NO_NULO_ABRE> (<TOKEN_Y> {no_nulo="Y";}|<TOKEN_N> {no_nulo="N";}) <TOKEN_NO_NULO_CIERRA> 
			<TOKEN_AUTOINCREMENTABLE_ABRE> (<TOKEN_Y> {autoincrementable="Y";}|<TOKEN_N> {autoincrementable="N";}) <TOKEN_AUTOINCREMENTABLE_CIERRA> 
			<TOKEN_LLAVE_PRIMARIA_ABRE> (<TOKEN_Y> {llave_primaria="Y";}|<TOKEN_N> {llave_primaria="N";}) <TOKEN_LLAVE_PRIMARIA_CIERRA> 
			<TOKEN_LLAVE_FORANEA_ABRE> (f=<CADENA>{
														llave_foranea= f.image;
														llave_foranea= llave_foranea.substring(1, llave_foranea.length()-1);
													  }|<TOKEN_N> {llave_foranea="N";}) <TOKEN_LLAVE_FORANEA_CIERRA> 
	<TOKEN_PROPERTY_CIERRA> 
															{
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                ArrayList<fila_tabla> registro = new ArrayList<fila_tabla>();
                                                                table ta= new table(nombre_param,"DOUBLE",nulo,no_nulo,autoincrementable,llave_primaria,llave_foranea,registro,false,null);
                                                                lt.add(ta);
                                                            }
    |<TOKEN_BOOL_ABRE> t=<CADENA> <TOKEN_BOOL_CIERRA>
        <TOKEN_PROPERTY_ABRE> 
			<TOKEN_NULO_ABRE> (<TOKEN_Y> {nulo="Y";}|<TOKEN_N> {nulo="N";}) <TOKEN_NULO_CIERRA> 
			<TOKEN_NO_NULO_ABRE> (<TOKEN_Y> {no_nulo="Y";}|<TOKEN_N> {no_nulo="N";}) <TOKEN_NO_NULO_CIERRA> 
			<TOKEN_AUTOINCREMENTABLE_ABRE> (<TOKEN_Y> {autoincrementable="Y";}|<TOKEN_N> {autoincrementable="N";}) <TOKEN_AUTOINCREMENTABLE_CIERRA> 
			<TOKEN_LLAVE_PRIMARIA_ABRE> (<TOKEN_Y> {llave_primaria="Y";}|<TOKEN_N> {llave_primaria="N";}) <TOKEN_LLAVE_PRIMARIA_CIERRA> 
			<TOKEN_LLAVE_FORANEA_ABRE> (f=<CADENA>{
														llave_foranea= f.image;
														llave_foranea= llave_foranea.substring(1, llave_foranea.length()-1);
													  }|<TOKEN_N> {llave_foranea="N";}) <TOKEN_LLAVE_FORANEA_CIERRA> 
	<TOKEN_PROPERTY_CIERRA> 
															{
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                ArrayList<fila_tabla> registro = new ArrayList<fila_tabla>();
                                                                table ta= new table(nombre_param,"BOOL",nulo,no_nulo,autoincrementable,llave_primaria,llave_foranea,registro,false,null);
                                                                lt.add(ta); 
                                                            }
    |<TOKEN_DATE_ABRE> t=<CADENA> <TOKEN_DATE_CIERRA>
     <TOKEN_PROPERTY_ABRE> 
			<TOKEN_NULO_ABRE> (<TOKEN_Y> {nulo="Y";}|<TOKEN_N> {nulo="N";}) <TOKEN_NULO_CIERRA> 
			<TOKEN_NO_NULO_ABRE> (<TOKEN_Y> {no_nulo="Y";}|<TOKEN_N> {no_nulo="N";}) <TOKEN_NO_NULO_CIERRA> 
			<TOKEN_AUTOINCREMENTABLE_ABRE> (<TOKEN_Y> {autoincrementable="Y";}|<TOKEN_N> {autoincrementable="N";}) <TOKEN_AUTOINCREMENTABLE_CIERRA> 
			<TOKEN_LLAVE_PRIMARIA_ABRE> (<TOKEN_Y> {llave_primaria="Y";}|<TOKEN_N> {llave_primaria="N";}) <TOKEN_LLAVE_PRIMARIA_CIERRA> 
			<TOKEN_LLAVE_FORANEA_ABRE> (f=<CADENA>{
														llave_foranea= f.image;
														llave_foranea= llave_foranea.substring(1, llave_foranea.length()-1);
													  }|<TOKEN_N> {llave_foranea="N";}) <TOKEN_LLAVE_FORANEA_CIERRA> 
	   <TOKEN_PROPERTY_CIERRA> 
															{
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                ArrayList<fila_tabla> registro = new ArrayList<fila_tabla>();
                                                                table ta= new table(nombre_param,"DATE",nulo,no_nulo,autoincrementable,llave_primaria,llave_foranea,registro,false,null);
                                                                lt.add(ta);
                                                            }
    |<TOKEN_DATETIME_ABRE> t=<CADENA> <TOKEN_DATETIME_CIERRA>
     <TOKEN_PROPERTY_ABRE> 
			<TOKEN_NULO_ABRE> (<TOKEN_Y> {nulo="Y";}|<TOKEN_N> {nulo="N";}) <TOKEN_NULO_CIERRA> 
			<TOKEN_NO_NULO_ABRE> (<TOKEN_Y> {no_nulo="Y";}|<TOKEN_N> {no_nulo="N";}) <TOKEN_NO_NULO_CIERRA> 
			<TOKEN_AUTOINCREMENTABLE_ABRE> (<TOKEN_Y> {autoincrementable="Y";}|<TOKEN_N> {autoincrementable="N";}) <TOKEN_AUTOINCREMENTABLE_CIERRA> 
			<TOKEN_LLAVE_PRIMARIA_ABRE> (<TOKEN_Y> {llave_primaria="Y";}|<TOKEN_N> {llave_primaria="N";}) <TOKEN_LLAVE_PRIMARIA_CIERRA> 
			<TOKEN_LLAVE_FORANEA_ABRE> (f=<CADENA>{
														llave_foranea= f.image;
														llave_foranea= llave_foranea.substring(1, llave_foranea.length()-1);
													  }|<TOKEN_N> {llave_foranea="N";}) <TOKEN_LLAVE_FORANEA_CIERRA> 
	   <TOKEN_PROPERTY_CIERRA> 
															{
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                ArrayList<fila_tabla> registro = new ArrayList<fila_tabla>();
                                                                table ta= new table(nombre_param,"DATETIME",nulo,no_nulo,autoincrementable,llave_primaria,llave_foranea,registro,false,null);
                                                                lt.add(ta);
                                                            } 
    |tip=<TOKEN_ID_ABRE> t=<CADENA> <TOKEN_ID_CIERRA>
	     <TOKEN_PROPERTY_ABRE> 
			<TOKEN_NULO_ABRE> (<TOKEN_Y> {nulo="Y";}|<TOKEN_N> {nulo="N";}) <TOKEN_NULO_CIERRA> 
			<TOKEN_NO_NULO_ABRE> (<TOKEN_Y> {no_nulo="Y";}|<TOKEN_N> {no_nulo="N";}) <TOKEN_NO_NULO_CIERRA> 
			<TOKEN_AUTOINCREMENTABLE_ABRE> (<TOKEN_Y> {autoincrementable="Y";}|<TOKEN_N> {autoincrementable="N";}) <TOKEN_AUTOINCREMENTABLE_CIERRA> 
			<TOKEN_LLAVE_PRIMARIA_ABRE> (<TOKEN_Y> {llave_primaria="Y";}|<TOKEN_N> {llave_primaria="N";}) <TOKEN_LLAVE_PRIMARIA_CIERRA> 
			<TOKEN_LLAVE_FORANEA_ABRE> (f=<CADENA>{
														llave_foranea= f.image;
														llave_foranea= llave_foranea.substring(1, llave_foranea.length()-1);
													  }|<TOKEN_N> {llave_foranea="N";}) <TOKEN_LLAVE_FORANEA_CIERRA> 
	   <TOKEN_PROPERTY_CIERRA> 
															{
                                                                tipo = tip.image;
                                                                tipo = tipo.substring(1, tipo.length()-1);
                                                                nombre_param= t.image;
                                                                nombre_param= nombre_param.substring(1, nombre_param.length()-1);
                                                                ArrayList<fila_tabla_objeto> registro_objeto = new ArrayList<fila_tabla_objeto>();
                                                                table ta= new table(nombre_param,tipo,nulo,no_nulo,autoincrementable,llave_primaria,llave_foranea,null,true,registro_objeto);  
                                                                lt.add(ta);
                                                            } 
}




